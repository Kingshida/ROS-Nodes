"""autogenerated by genpy from ezls_msgs/VsalEngineCommandRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VsalEngineCommandRequest(genpy.Message):
  _md5sum = "c6fa663c7b876fe1ce3daf1d1b4ee453"
  _type = "ezls_msgs/VsalEngineCommandRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """








int32 command

uint8 state
float64 referenceGas
uint8 referenceGear
float64 referenceBrakingStrength
uint8 starterTime
uint8 ventilation
uint8 horn
uint8 light


"""
  __slots__ = ['command','state','referenceGas','referenceGear','referenceBrakingStrength','starterTime','ventilation','horn','light']
  _slot_types = ['int32','uint8','float64','uint8','float64','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       command,state,referenceGas,referenceGear,referenceBrakingStrength,starterTime,ventilation,horn,light

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VsalEngineCommandRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.command is None:
        self.command = 0
      if self.state is None:
        self.state = 0
      if self.referenceGas is None:
        self.referenceGas = 0.
      if self.referenceGear is None:
        self.referenceGear = 0
      if self.referenceBrakingStrength is None:
        self.referenceBrakingStrength = 0.
      if self.starterTime is None:
        self.starterTime = 0
      if self.ventilation is None:
        self.ventilation = 0
      if self.horn is None:
        self.horn = 0
      if self.light is None:
        self.light = 0
    else:
      self.command = 0
      self.state = 0
      self.referenceGas = 0.
      self.referenceGear = 0
      self.referenceBrakingStrength = 0.
      self.starterTime = 0
      self.ventilation = 0
      self.horn = 0
      self.light = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_iBdBd4B.pack(_x.command, _x.state, _x.referenceGas, _x.referenceGear, _x.referenceBrakingStrength, _x.starterTime, _x.ventilation, _x.horn, _x.light))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.command, _x.state, _x.referenceGas, _x.referenceGear, _x.referenceBrakingStrength, _x.starterTime, _x.ventilation, _x.horn, _x.light,) = _struct_iBdBd4B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_iBdBd4B.pack(_x.command, _x.state, _x.referenceGas, _x.referenceGear, _x.referenceBrakingStrength, _x.starterTime, _x.ventilation, _x.horn, _x.light))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.command, _x.state, _x.referenceGas, _x.referenceGear, _x.referenceBrakingStrength, _x.starterTime, _x.ventilation, _x.horn, _x.light,) = _struct_iBdBd4B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_iBdBd4B = struct.Struct("<iBdBd4B")
"""autogenerated by genpy from ezls_msgs/VsalEngineCommandResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VsalEngineCommandResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "ezls_msgs/VsalEngineCommandResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

bool success


"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VsalEngineCommandResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.success))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.success))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class VsalEngineCommand(object):
  _type          = 'ezls_msgs/VsalEngineCommand'
  _md5sum = 'c4ca7d3de4e86d811a8a2e8694abd4c3'
  _request_class  = VsalEngineCommandRequest
  _response_class = VsalEngineCommandResponse

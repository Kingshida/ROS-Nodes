"""autogenerated by genpy from ezls_msgs/VsalGPS.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VsalGPS(genpy.Message):
  _md5sum = "acc90f3eb0f6db6f03add5a68851c187"
  _type = "ezls_msgs/VsalGPS"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8   state
float64 uptime
float64 UTC
uint8   valid
float64 latitude
uint8   latitudeDir
float64 longitude
uint8   longitudeDir
float64 trackDegrees
uint32  date
float64 kmPerHour
uint8   gpsQuality
uint8   numberOfSatellites
float64 antennaAltitudeAboveSeaLevel
float64 pdop
float64 hdop
float64 vdop
uint8   snr
float64 UTMRight
float64 UTMHigh
uint16  UTMAltitude
uint8   UTMZone

"""
  __slots__ = ['state','uptime','UTC','valid','latitude','latitudeDir','longitude','longitudeDir','trackDegrees','date','kmPerHour','gpsQuality','numberOfSatellites','antennaAltitudeAboveSeaLevel','pdop','hdop','vdop','snr','UTMRight','UTMHigh','UTMAltitude','UTMZone']
  _slot_types = ['uint8','float64','float64','uint8','float64','uint8','float64','uint8','float64','uint32','float64','uint8','uint8','float64','float64','float64','float64','uint8','float64','float64','uint16','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state,uptime,UTC,valid,latitude,latitudeDir,longitude,longitudeDir,trackDegrees,date,kmPerHour,gpsQuality,numberOfSatellites,antennaAltitudeAboveSeaLevel,pdop,hdop,vdop,snr,UTMRight,UTMHigh,UTMAltitude,UTMZone

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VsalGPS, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = 0
      if self.uptime is None:
        self.uptime = 0.
      if self.UTC is None:
        self.UTC = 0.
      if self.valid is None:
        self.valid = 0
      if self.latitude is None:
        self.latitude = 0.
      if self.latitudeDir is None:
        self.latitudeDir = 0
      if self.longitude is None:
        self.longitude = 0.
      if self.longitudeDir is None:
        self.longitudeDir = 0
      if self.trackDegrees is None:
        self.trackDegrees = 0.
      if self.date is None:
        self.date = 0
      if self.kmPerHour is None:
        self.kmPerHour = 0.
      if self.gpsQuality is None:
        self.gpsQuality = 0
      if self.numberOfSatellites is None:
        self.numberOfSatellites = 0
      if self.antennaAltitudeAboveSeaLevel is None:
        self.antennaAltitudeAboveSeaLevel = 0.
      if self.pdop is None:
        self.pdop = 0.
      if self.hdop is None:
        self.hdop = 0.
      if self.vdop is None:
        self.vdop = 0.
      if self.snr is None:
        self.snr = 0
      if self.UTMRight is None:
        self.UTMRight = 0.
      if self.UTMHigh is None:
        self.UTMHigh = 0.
      if self.UTMAltitude is None:
        self.UTMAltitude = 0
      if self.UTMZone is None:
        self.UTMZone = 0
    else:
      self.state = 0
      self.uptime = 0.
      self.UTC = 0.
      self.valid = 0
      self.latitude = 0.
      self.latitudeDir = 0
      self.longitude = 0.
      self.longitudeDir = 0
      self.trackDegrees = 0.
      self.date = 0
      self.kmPerHour = 0.
      self.gpsQuality = 0
      self.numberOfSatellites = 0
      self.antennaAltitudeAboveSeaLevel = 0.
      self.pdop = 0.
      self.hdop = 0.
      self.vdop = 0.
      self.snr = 0
      self.UTMRight = 0.
      self.UTMHigh = 0.
      self.UTMAltitude = 0
      self.UTMZone = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B2dBdBdBdId2B4dB2dHB.pack(_x.state, _x.uptime, _x.UTC, _x.valid, _x.latitude, _x.latitudeDir, _x.longitude, _x.longitudeDir, _x.trackDegrees, _x.date, _x.kmPerHour, _x.gpsQuality, _x.numberOfSatellites, _x.antennaAltitudeAboveSeaLevel, _x.pdop, _x.hdop, _x.vdop, _x.snr, _x.UTMRight, _x.UTMHigh, _x.UTMAltitude, _x.UTMZone))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 110
      (_x.state, _x.uptime, _x.UTC, _x.valid, _x.latitude, _x.latitudeDir, _x.longitude, _x.longitudeDir, _x.trackDegrees, _x.date, _x.kmPerHour, _x.gpsQuality, _x.numberOfSatellites, _x.antennaAltitudeAboveSeaLevel, _x.pdop, _x.hdop, _x.vdop, _x.snr, _x.UTMRight, _x.UTMHigh, _x.UTMAltitude, _x.UTMZone,) = _struct_B2dBdBdBdId2B4dB2dHB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B2dBdBdBdId2B4dB2dHB.pack(_x.state, _x.uptime, _x.UTC, _x.valid, _x.latitude, _x.latitudeDir, _x.longitude, _x.longitudeDir, _x.trackDegrees, _x.date, _x.kmPerHour, _x.gpsQuality, _x.numberOfSatellites, _x.antennaAltitudeAboveSeaLevel, _x.pdop, _x.hdop, _x.vdop, _x.snr, _x.UTMRight, _x.UTMHigh, _x.UTMAltitude, _x.UTMZone))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 110
      (_x.state, _x.uptime, _x.UTC, _x.valid, _x.latitude, _x.latitudeDir, _x.longitude, _x.longitudeDir, _x.trackDegrees, _x.date, _x.kmPerHour, _x.gpsQuality, _x.numberOfSatellites, _x.antennaAltitudeAboveSeaLevel, _x.pdop, _x.hdop, _x.vdop, _x.snr, _x.UTMRight, _x.UTMHigh, _x.UTMAltitude, _x.UTMZone,) = _struct_B2dBdBdBdId2B4dB2dHB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B2dBdBdBdId2B4dB2dHB = struct.Struct("<B2dBdBdBdId2B4dB2dHB")

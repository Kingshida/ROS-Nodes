"""autogenerated by genpy from ezls_msgs/LmsConfiguration.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LmsConfiguration(genpy.Message):
  _md5sum = "96886c9f43b8ad9aa43094dd2c1a6258"
  _type = "ezls_msgs/LmsConfiguration"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# IP address of laser scanner.
string address

#IP port of laser scanner.
string port

# Type of laser scanner.
uint8 type

# Height over ground of the laser scanner coordinate system [in m].
float64 heightOverGround

# Correctional parameters used in cartesian coordinates transformation. //
# Winkel-Offset zwischen Laserscanner-Koordinatensystem und Welt-Koordinatensystem. Kann mit dem Tool LmsPoseCalibrator ermittelt werden.
float64 pitchOffset

# Winkel zwischen der Horizontalen und der Verbindungslinie der Koordinatensystemsurspruenge [in rad].
# 0.3723 ( entspricht: 21.33 deg / 180 deg * PI )
float64 corrAngle

# Abstand der Koordinatensystemsurspruenge [in m]. Wenn dieser Werte 0 ist wird der Korrekturterm in toCartesian() (mit corrAngle und corrDist) ignoriert.
# 191.10
float64 corrDist



"""
  __slots__ = ['address','port','type','heightOverGround','pitchOffset','corrAngle','corrDist']
  _slot_types = ['string','string','uint8','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       address,port,type,heightOverGround,pitchOffset,corrAngle,corrDist

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LmsConfiguration, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.address is None:
        self.address = ''
      if self.port is None:
        self.port = ''
      if self.type is None:
        self.type = 0
      if self.heightOverGround is None:
        self.heightOverGround = 0.
      if self.pitchOffset is None:
        self.pitchOffset = 0.
      if self.corrAngle is None:
        self.corrAngle = 0.
      if self.corrDist is None:
        self.corrDist = 0.
    else:
      self.address = ''
      self.port = ''
      self.type = 0
      self.heightOverGround = 0.
      self.pitchOffset = 0.
      self.corrAngle = 0.
      self.corrDist = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.address
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.port
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B4d.pack(_x.type, _x.heightOverGround, _x.pitchOffset, _x.corrAngle, _x.corrDist))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.address = str[start:end].decode('utf-8')
      else:
        self.address = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.port = str[start:end].decode('utf-8')
      else:
        self.port = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.type, _x.heightOverGround, _x.pitchOffset, _x.corrAngle, _x.corrDist,) = _struct_B4d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.address
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.port
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B4d.pack(_x.type, _x.heightOverGround, _x.pitchOffset, _x.corrAngle, _x.corrDist))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.address = str[start:end].decode('utf-8')
      else:
        self.address = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.port = str[start:end].decode('utf-8')
      else:
        self.port = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.type, _x.heightOverGround, _x.pitchOffset, _x.corrAngle, _x.corrDist,) = _struct_B4d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B4d = struct.Struct("<B4d")

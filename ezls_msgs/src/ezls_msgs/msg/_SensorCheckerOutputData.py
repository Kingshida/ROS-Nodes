"""autogenerated by genpy from ezls_msgs/SensorCheckerOutputData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class SensorCheckerOutputData(genpy.Message):
  _md5sum = "ba65c7f994e0ee8608afec6a3a85c28d"
  _type = "ezls_msgs/SensorCheckerOutputData"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header



# Estimated accuracy for gps sensor [0...1, 0=worst, 1=best]
float64 accuracyGps

# Position from gps
float64[2] utmGps
    
# Heading from gps
float64 headingGps

# Height from Gps
float64 gpsHeight

# Visible satellites gps
int32 gpsSatellites

# Estimated accuracy for dgps sensor [0...1, 0=worst, 1=best]
float64 accuracyDgps

# Position from dgps
float64[2] utmDgps

# UTM zone from dgps
int32 utmZoneDgps

# Heading from dgps
float64 headingDgps

# Height from dgps
float64 dgpsHeight

# Visible satellites dgps
int32 dgpsSatellites

# Measured value for compass sensor
float64 valueCompass

# Estimated accuracy for tacho sensor [0...1, 0=worst, 1=best]
float64 accuracyTacho

# Measured distance value for tacho
float64 valueTachoDistance

# Measured speed value for tacho
float64 valueTachoSpeed

# Estimated accuracy for left omr sensor [0...1, 0=worst, 1=best]
float64 accuracyOmrLeft

# Measured value for left omr sensor
float64 valueOmrLeft

# Estimated accuracy for right omr sensor [0...1, 0=worst, 1=best]
float64 accuracyOmrRight

# Measured value for right omr sensor
float64 valueOmrRight

# Integrated direction of imu gyro in z-axis
float64 imuDirection

# Raw values from accelerometers
float64[4] valueImuAcc

# Steering angle read from steering node
float64 steeringAngle



# TODO:
# OLD VALUES FROM DOWN HERE, CHECK WHERE NEEDED!!!


# Integrity for compass sensor [0...1, 0=worst, 1=best]
float64 integrityCompass


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','accuracyGps','utmGps','headingGps','gpsHeight','gpsSatellites','accuracyDgps','utmDgps','utmZoneDgps','headingDgps','dgpsHeight','dgpsSatellites','valueCompass','accuracyTacho','valueTachoDistance','valueTachoSpeed','accuracyOmrLeft','valueOmrLeft','accuracyOmrRight','valueOmrRight','imuDirection','valueImuAcc','steeringAngle','integrityCompass']
  _slot_types = ['std_msgs/Header','float64','float64[2]','float64','float64','int32','float64','float64[2]','int32','float64','float64','int32','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64[4]','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,accuracyGps,utmGps,headingGps,gpsHeight,gpsSatellites,accuracyDgps,utmDgps,utmZoneDgps,headingDgps,dgpsHeight,dgpsSatellites,valueCompass,accuracyTacho,valueTachoDistance,valueTachoSpeed,accuracyOmrLeft,valueOmrLeft,accuracyOmrRight,valueOmrRight,imuDirection,valueImuAcc,steeringAngle,integrityCompass

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SensorCheckerOutputData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.accuracyGps is None:
        self.accuracyGps = 0.
      if self.utmGps is None:
        self.utmGps = [0.,0.]
      if self.headingGps is None:
        self.headingGps = 0.
      if self.gpsHeight is None:
        self.gpsHeight = 0.
      if self.gpsSatellites is None:
        self.gpsSatellites = 0
      if self.accuracyDgps is None:
        self.accuracyDgps = 0.
      if self.utmDgps is None:
        self.utmDgps = [0.,0.]
      if self.utmZoneDgps is None:
        self.utmZoneDgps = 0
      if self.headingDgps is None:
        self.headingDgps = 0.
      if self.dgpsHeight is None:
        self.dgpsHeight = 0.
      if self.dgpsSatellites is None:
        self.dgpsSatellites = 0
      if self.valueCompass is None:
        self.valueCompass = 0.
      if self.accuracyTacho is None:
        self.accuracyTacho = 0.
      if self.valueTachoDistance is None:
        self.valueTachoDistance = 0.
      if self.valueTachoSpeed is None:
        self.valueTachoSpeed = 0.
      if self.accuracyOmrLeft is None:
        self.accuracyOmrLeft = 0.
      if self.valueOmrLeft is None:
        self.valueOmrLeft = 0.
      if self.accuracyOmrRight is None:
        self.accuracyOmrRight = 0.
      if self.valueOmrRight is None:
        self.valueOmrRight = 0.
      if self.imuDirection is None:
        self.imuDirection = 0.
      if self.valueImuAcc is None:
        self.valueImuAcc = [0.,0.,0.,0.]
      if self.steeringAngle is None:
        self.steeringAngle = 0.
      if self.integrityCompass is None:
        self.integrityCompass = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.accuracyGps = 0.
      self.utmGps = [0.,0.]
      self.headingGps = 0.
      self.gpsHeight = 0.
      self.gpsSatellites = 0
      self.accuracyDgps = 0.
      self.utmDgps = [0.,0.]
      self.utmZoneDgps = 0
      self.headingDgps = 0.
      self.dgpsHeight = 0.
      self.dgpsSatellites = 0
      self.valueCompass = 0.
      self.accuracyTacho = 0.
      self.valueTachoDistance = 0.
      self.valueTachoSpeed = 0.
      self.accuracyOmrLeft = 0.
      self.valueOmrLeft = 0.
      self.accuracyOmrRight = 0.
      self.valueOmrRight = 0.
      self.imuDirection = 0.
      self.valueImuAcc = [0.,0.,0.,0.]
      self.steeringAngle = 0.
      self.integrityCompass = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.accuracyGps))
      buff.write(_struct_2d.pack(*self.utmGps))
      _x = self
      buff.write(_struct_2did.pack(_x.headingGps, _x.gpsHeight, _x.gpsSatellites, _x.accuracyDgps))
      buff.write(_struct_2d.pack(*self.utmDgps))
      _x = self
      buff.write(_struct_i2di9d.pack(_x.utmZoneDgps, _x.headingDgps, _x.dgpsHeight, _x.dgpsSatellites, _x.valueCompass, _x.accuracyTacho, _x.valueTachoDistance, _x.valueTachoSpeed, _x.accuracyOmrLeft, _x.valueOmrLeft, _x.accuracyOmrRight, _x.valueOmrRight, _x.imuDirection))
      buff.write(_struct_4d.pack(*self.valueImuAcc))
      _x = self
      buff.write(_struct_2d.pack(_x.steeringAngle, _x.integrityCompass))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 8
      (self.accuracyGps,) = _struct_d.unpack(str[start:end])
      start = end
      end += 16
      self.utmGps = _struct_2d.unpack(str[start:end])
      _x = self
      start = end
      end += 28
      (_x.headingGps, _x.gpsHeight, _x.gpsSatellites, _x.accuracyDgps,) = _struct_2did.unpack(str[start:end])
      start = end
      end += 16
      self.utmDgps = _struct_2d.unpack(str[start:end])
      _x = self
      start = end
      end += 96
      (_x.utmZoneDgps, _x.headingDgps, _x.dgpsHeight, _x.dgpsSatellites, _x.valueCompass, _x.accuracyTacho, _x.valueTachoDistance, _x.valueTachoSpeed, _x.accuracyOmrLeft, _x.valueOmrLeft, _x.accuracyOmrRight, _x.valueOmrRight, _x.imuDirection,) = _struct_i2di9d.unpack(str[start:end])
      start = end
      end += 32
      self.valueImuAcc = _struct_4d.unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.steeringAngle, _x.integrityCompass,) = _struct_2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.accuracyGps))
      buff.write(self.utmGps.tostring())
      _x = self
      buff.write(_struct_2did.pack(_x.headingGps, _x.gpsHeight, _x.gpsSatellites, _x.accuracyDgps))
      buff.write(self.utmDgps.tostring())
      _x = self
      buff.write(_struct_i2di9d.pack(_x.utmZoneDgps, _x.headingDgps, _x.dgpsHeight, _x.dgpsSatellites, _x.valueCompass, _x.accuracyTacho, _x.valueTachoDistance, _x.valueTachoSpeed, _x.accuracyOmrLeft, _x.valueOmrLeft, _x.accuracyOmrRight, _x.valueOmrRight, _x.imuDirection))
      buff.write(self.valueImuAcc.tostring())
      _x = self
      buff.write(_struct_2d.pack(_x.steeringAngle, _x.integrityCompass))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 8
      (self.accuracyGps,) = _struct_d.unpack(str[start:end])
      start = end
      end += 16
      self.utmGps = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      _x = self
      start = end
      end += 28
      (_x.headingGps, _x.gpsHeight, _x.gpsSatellites, _x.accuracyDgps,) = _struct_2did.unpack(str[start:end])
      start = end
      end += 16
      self.utmDgps = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      _x = self
      start = end
      end += 96
      (_x.utmZoneDgps, _x.headingDgps, _x.dgpsHeight, _x.dgpsSatellites, _x.valueCompass, _x.accuracyTacho, _x.valueTachoDistance, _x.valueTachoSpeed, _x.accuracyOmrLeft, _x.valueOmrLeft, _x.accuracyOmrRight, _x.valueOmrRight, _x.imuDirection,) = _struct_i2di9d.unpack(str[start:end])
      start = end
      end += 32
      self.valueImuAcc = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      _x = self
      start = end
      end += 16
      (_x.steeringAngle, _x.integrityCompass,) = _struct_2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d = struct.Struct("<d")
_struct_i2di9d = struct.Struct("<i2di9d")
_struct_2d = struct.Struct("<2d")
_struct_3I = struct.Struct("<3I")
_struct_4d = struct.Struct("<4d")
_struct_2did = struct.Struct("<2did")

"""autogenerated by genpy from ezls_msgs/Event.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Event(genpy.Message):
  _md5sum = "cc63b1f5e4469d1121e419b522359c6b"
  _type = "ezls_msgs/Event"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ID of this event.
uint32 id

# Timestamp of this event [in seconds].
float64 timestamp

# Indicates if this event is addressed to a specific group.
bool isAddressed

# ID of the adressed group.
uint32 addressee

# Priority of this event.
int32 priority

# Satisfaction data structure [at the moment only a floating point value].
float64 satisfaction

"""
  __slots__ = ['id','timestamp','isAddressed','addressee','priority','satisfaction']
  _slot_types = ['uint32','float64','bool','uint32','int32','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,timestamp,isAddressed,addressee,priority,satisfaction

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Event, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.timestamp is None:
        self.timestamp = 0.
      if self.isAddressed is None:
        self.isAddressed = False
      if self.addressee is None:
        self.addressee = 0
      if self.priority is None:
        self.priority = 0
      if self.satisfaction is None:
        self.satisfaction = 0.
    else:
      self.id = 0
      self.timestamp = 0.
      self.isAddressed = False
      self.addressee = 0
      self.priority = 0
      self.satisfaction = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_IdBIid.pack(_x.id, _x.timestamp, _x.isAddressed, _x.addressee, _x.priority, _x.satisfaction))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.id, _x.timestamp, _x.isAddressed, _x.addressee, _x.priority, _x.satisfaction,) = _struct_IdBIid.unpack(str[start:end])
      self.isAddressed = bool(self.isAddressed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_IdBIid.pack(_x.id, _x.timestamp, _x.isAddressed, _x.addressee, _x.priority, _x.satisfaction))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.id, _x.timestamp, _x.isAddressed, _x.addressee, _x.priority, _x.satisfaction,) = _struct_IdBIid.unpack(str[start:end])
      self.isAddressed = bool(self.isAddressed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_IdBIid = struct.Struct("<IdBIid")

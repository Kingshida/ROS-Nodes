"""autogenerated by genpy from ezls_msgs/Odometry3DOutputData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class Odometry3DOutputData(genpy.Message):
  _md5sum = "8ed2d9eb6d6c94fde22545aadae8a437"
  _type = "ezls_msgs/Odometry3DOutputData"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
float64 distanceOverGround
float64 speed
geometry_msgs/PoseStamped pose2Filter
geometry_msgs/PoseStamped pose2Gyro
geometry_msgs/PoseStamped pose3Filter
geometry_msgs/PoseStamped pose3Gyro
geometry_msgs/Vector3 anglesFilter
geometry_msgs/Vector3 anglesGyro

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['header','distanceOverGround','speed','pose2Filter','pose2Gyro','pose3Filter','pose3Gyro','anglesFilter','anglesGyro']
  _slot_types = ['std_msgs/Header','float64','float64','geometry_msgs/PoseStamped','geometry_msgs/PoseStamped','geometry_msgs/PoseStamped','geometry_msgs/PoseStamped','geometry_msgs/Vector3','geometry_msgs/Vector3']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,distanceOverGround,speed,pose2Filter,pose2Gyro,pose3Filter,pose3Gyro,anglesFilter,anglesGyro

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Odometry3DOutputData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.distanceOverGround is None:
        self.distanceOverGround = 0.
      if self.speed is None:
        self.speed = 0.
      if self.pose2Filter is None:
        self.pose2Filter = geometry_msgs.msg.PoseStamped()
      if self.pose2Gyro is None:
        self.pose2Gyro = geometry_msgs.msg.PoseStamped()
      if self.pose3Filter is None:
        self.pose3Filter = geometry_msgs.msg.PoseStamped()
      if self.pose3Gyro is None:
        self.pose3Gyro = geometry_msgs.msg.PoseStamped()
      if self.anglesFilter is None:
        self.anglesFilter = geometry_msgs.msg.Vector3()
      if self.anglesGyro is None:
        self.anglesGyro = geometry_msgs.msg.Vector3()
    else:
      self.header = std_msgs.msg.Header()
      self.distanceOverGround = 0.
      self.speed = 0.
      self.pose2Filter = geometry_msgs.msg.PoseStamped()
      self.pose2Gyro = geometry_msgs.msg.PoseStamped()
      self.pose3Filter = geometry_msgs.msg.PoseStamped()
      self.pose3Gyro = geometry_msgs.msg.PoseStamped()
      self.anglesFilter = geometry_msgs.msg.Vector3()
      self.anglesGyro = geometry_msgs.msg.Vector3()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2d3I.pack(_x.distanceOverGround, _x.speed, _x.pose2Filter.header.seq, _x.pose2Filter.header.stamp.secs, _x.pose2Filter.header.stamp.nsecs))
      _x = self.pose2Filter.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.pose2Filter.pose.position.x, _x.pose2Filter.pose.position.y, _x.pose2Filter.pose.position.z, _x.pose2Filter.pose.orientation.x, _x.pose2Filter.pose.orientation.y, _x.pose2Filter.pose.orientation.z, _x.pose2Filter.pose.orientation.w, _x.pose2Gyro.header.seq, _x.pose2Gyro.header.stamp.secs, _x.pose2Gyro.header.stamp.nsecs))
      _x = self.pose2Gyro.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.pose2Gyro.pose.position.x, _x.pose2Gyro.pose.position.y, _x.pose2Gyro.pose.position.z, _x.pose2Gyro.pose.orientation.x, _x.pose2Gyro.pose.orientation.y, _x.pose2Gyro.pose.orientation.z, _x.pose2Gyro.pose.orientation.w, _x.pose3Filter.header.seq, _x.pose3Filter.header.stamp.secs, _x.pose3Filter.header.stamp.nsecs))
      _x = self.pose3Filter.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.pose3Filter.pose.position.x, _x.pose3Filter.pose.position.y, _x.pose3Filter.pose.position.z, _x.pose3Filter.pose.orientation.x, _x.pose3Filter.pose.orientation.y, _x.pose3Filter.pose.orientation.z, _x.pose3Filter.pose.orientation.w, _x.pose3Gyro.header.seq, _x.pose3Gyro.header.stamp.secs, _x.pose3Gyro.header.stamp.nsecs))
      _x = self.pose3Gyro.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13d.pack(_x.pose3Gyro.pose.position.x, _x.pose3Gyro.pose.position.y, _x.pose3Gyro.pose.position.z, _x.pose3Gyro.pose.orientation.x, _x.pose3Gyro.pose.orientation.y, _x.pose3Gyro.pose.orientation.z, _x.pose3Gyro.pose.orientation.w, _x.anglesFilter.x, _x.anglesFilter.y, _x.anglesFilter.z, _x.anglesGyro.x, _x.anglesGyro.y, _x.anglesGyro.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose2Filter is None:
        self.pose2Filter = geometry_msgs.msg.PoseStamped()
      if self.pose2Gyro is None:
        self.pose2Gyro = geometry_msgs.msg.PoseStamped()
      if self.pose3Filter is None:
        self.pose3Filter = geometry_msgs.msg.PoseStamped()
      if self.pose3Gyro is None:
        self.pose3Gyro = geometry_msgs.msg.PoseStamped()
      if self.anglesFilter is None:
        self.anglesFilter = geometry_msgs.msg.Vector3()
      if self.anglesGyro is None:
        self.anglesGyro = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.distanceOverGround, _x.speed, _x.pose2Filter.header.seq, _x.pose2Filter.header.stamp.secs, _x.pose2Filter.header.stamp.nsecs,) = _struct_2d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose2Filter.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pose2Filter.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.pose2Filter.pose.position.x, _x.pose2Filter.pose.position.y, _x.pose2Filter.pose.position.z, _x.pose2Filter.pose.orientation.x, _x.pose2Filter.pose.orientation.y, _x.pose2Filter.pose.orientation.z, _x.pose2Filter.pose.orientation.w, _x.pose2Gyro.header.seq, _x.pose2Gyro.header.stamp.secs, _x.pose2Gyro.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose2Gyro.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pose2Gyro.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.pose2Gyro.pose.position.x, _x.pose2Gyro.pose.position.y, _x.pose2Gyro.pose.position.z, _x.pose2Gyro.pose.orientation.x, _x.pose2Gyro.pose.orientation.y, _x.pose2Gyro.pose.orientation.z, _x.pose2Gyro.pose.orientation.w, _x.pose3Filter.header.seq, _x.pose3Filter.header.stamp.secs, _x.pose3Filter.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose3Filter.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pose3Filter.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.pose3Filter.pose.position.x, _x.pose3Filter.pose.position.y, _x.pose3Filter.pose.position.z, _x.pose3Filter.pose.orientation.x, _x.pose3Filter.pose.orientation.y, _x.pose3Filter.pose.orientation.z, _x.pose3Filter.pose.orientation.w, _x.pose3Gyro.header.seq, _x.pose3Gyro.header.stamp.secs, _x.pose3Gyro.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose3Gyro.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pose3Gyro.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 104
      (_x.pose3Gyro.pose.position.x, _x.pose3Gyro.pose.position.y, _x.pose3Gyro.pose.position.z, _x.pose3Gyro.pose.orientation.x, _x.pose3Gyro.pose.orientation.y, _x.pose3Gyro.pose.orientation.z, _x.pose3Gyro.pose.orientation.w, _x.anglesFilter.x, _x.anglesFilter.y, _x.anglesFilter.z, _x.anglesGyro.x, _x.anglesGyro.y, _x.anglesGyro.z,) = _struct_13d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2d3I.pack(_x.distanceOverGround, _x.speed, _x.pose2Filter.header.seq, _x.pose2Filter.header.stamp.secs, _x.pose2Filter.header.stamp.nsecs))
      _x = self.pose2Filter.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.pose2Filter.pose.position.x, _x.pose2Filter.pose.position.y, _x.pose2Filter.pose.position.z, _x.pose2Filter.pose.orientation.x, _x.pose2Filter.pose.orientation.y, _x.pose2Filter.pose.orientation.z, _x.pose2Filter.pose.orientation.w, _x.pose2Gyro.header.seq, _x.pose2Gyro.header.stamp.secs, _x.pose2Gyro.header.stamp.nsecs))
      _x = self.pose2Gyro.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.pose2Gyro.pose.position.x, _x.pose2Gyro.pose.position.y, _x.pose2Gyro.pose.position.z, _x.pose2Gyro.pose.orientation.x, _x.pose2Gyro.pose.orientation.y, _x.pose2Gyro.pose.orientation.z, _x.pose2Gyro.pose.orientation.w, _x.pose3Filter.header.seq, _x.pose3Filter.header.stamp.secs, _x.pose3Filter.header.stamp.nsecs))
      _x = self.pose3Filter.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.pose3Filter.pose.position.x, _x.pose3Filter.pose.position.y, _x.pose3Filter.pose.position.z, _x.pose3Filter.pose.orientation.x, _x.pose3Filter.pose.orientation.y, _x.pose3Filter.pose.orientation.z, _x.pose3Filter.pose.orientation.w, _x.pose3Gyro.header.seq, _x.pose3Gyro.header.stamp.secs, _x.pose3Gyro.header.stamp.nsecs))
      _x = self.pose3Gyro.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13d.pack(_x.pose3Gyro.pose.position.x, _x.pose3Gyro.pose.position.y, _x.pose3Gyro.pose.position.z, _x.pose3Gyro.pose.orientation.x, _x.pose3Gyro.pose.orientation.y, _x.pose3Gyro.pose.orientation.z, _x.pose3Gyro.pose.orientation.w, _x.anglesFilter.x, _x.anglesFilter.y, _x.anglesFilter.z, _x.anglesGyro.x, _x.anglesGyro.y, _x.anglesGyro.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose2Filter is None:
        self.pose2Filter = geometry_msgs.msg.PoseStamped()
      if self.pose2Gyro is None:
        self.pose2Gyro = geometry_msgs.msg.PoseStamped()
      if self.pose3Filter is None:
        self.pose3Filter = geometry_msgs.msg.PoseStamped()
      if self.pose3Gyro is None:
        self.pose3Gyro = geometry_msgs.msg.PoseStamped()
      if self.anglesFilter is None:
        self.anglesFilter = geometry_msgs.msg.Vector3()
      if self.anglesGyro is None:
        self.anglesGyro = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.distanceOverGround, _x.speed, _x.pose2Filter.header.seq, _x.pose2Filter.header.stamp.secs, _x.pose2Filter.header.stamp.nsecs,) = _struct_2d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose2Filter.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pose2Filter.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.pose2Filter.pose.position.x, _x.pose2Filter.pose.position.y, _x.pose2Filter.pose.position.z, _x.pose2Filter.pose.orientation.x, _x.pose2Filter.pose.orientation.y, _x.pose2Filter.pose.orientation.z, _x.pose2Filter.pose.orientation.w, _x.pose2Gyro.header.seq, _x.pose2Gyro.header.stamp.secs, _x.pose2Gyro.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose2Gyro.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pose2Gyro.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.pose2Gyro.pose.position.x, _x.pose2Gyro.pose.position.y, _x.pose2Gyro.pose.position.z, _x.pose2Gyro.pose.orientation.x, _x.pose2Gyro.pose.orientation.y, _x.pose2Gyro.pose.orientation.z, _x.pose2Gyro.pose.orientation.w, _x.pose3Filter.header.seq, _x.pose3Filter.header.stamp.secs, _x.pose3Filter.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose3Filter.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pose3Filter.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.pose3Filter.pose.position.x, _x.pose3Filter.pose.position.y, _x.pose3Filter.pose.position.z, _x.pose3Filter.pose.orientation.x, _x.pose3Filter.pose.orientation.y, _x.pose3Filter.pose.orientation.z, _x.pose3Filter.pose.orientation.w, _x.pose3Gyro.header.seq, _x.pose3Gyro.header.stamp.secs, _x.pose3Gyro.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose3Gyro.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pose3Gyro.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 104
      (_x.pose3Gyro.pose.position.x, _x.pose3Gyro.pose.position.y, _x.pose3Gyro.pose.position.z, _x.pose3Gyro.pose.orientation.x, _x.pose3Gyro.pose.orientation.y, _x.pose3Gyro.pose.orientation.z, _x.pose3Gyro.pose.orientation.w, _x.anglesFilter.x, _x.anglesFilter.y, _x.anglesFilter.z, _x.anglesGyro.x, _x.anglesGyro.y, _x.anglesGyro.z,) = _struct_13d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_13d = struct.Struct("<13d")
_struct_2d3I = struct.Struct("<2d3I")
_struct_7d3I = struct.Struct("<7d3I")

"""autogenerated by genpy from ezls_msgs/VsalOpticalMovementRecognitionLeft.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VsalOpticalMovementRecognitionLeft(genpy.Message):
  _md5sum = "f19c12deb199df449fc5b9a5e6f4d1a4"
  _type = "ezls_msgs/VsalOpticalMovementRecognitionLeft"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8   state
float64 uptime
float64 movementX
float64 movementY
uint32  timeOfMovementReset
float64 positionX
float64 positionY
uint32  timeOfPositionReset
float64 movementTotalX
float64 movementTotalY
float64 positionTotalX
float64 positionTotalY
float64 speedX
float64 speedY
uint8   framerate
uint8   shutter
uint8   illumination
uint32  rawData
uint8   data

"""
  __slots__ = ['state','uptime','movementX','movementY','timeOfMovementReset','positionX','positionY','timeOfPositionReset','movementTotalX','movementTotalY','positionTotalX','positionTotalY','speedX','speedY','framerate','shutter','illumination','rawData','data']
  _slot_types = ['uint8','float64','float64','float64','uint32','float64','float64','uint32','float64','float64','float64','float64','float64','float64','uint8','uint8','uint8','uint32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state,uptime,movementX,movementY,timeOfMovementReset,positionX,positionY,timeOfPositionReset,movementTotalX,movementTotalY,positionTotalX,positionTotalY,speedX,speedY,framerate,shutter,illumination,rawData,data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VsalOpticalMovementRecognitionLeft, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = 0
      if self.uptime is None:
        self.uptime = 0.
      if self.movementX is None:
        self.movementX = 0.
      if self.movementY is None:
        self.movementY = 0.
      if self.timeOfMovementReset is None:
        self.timeOfMovementReset = 0
      if self.positionX is None:
        self.positionX = 0.
      if self.positionY is None:
        self.positionY = 0.
      if self.timeOfPositionReset is None:
        self.timeOfPositionReset = 0
      if self.movementTotalX is None:
        self.movementTotalX = 0.
      if self.movementTotalY is None:
        self.movementTotalY = 0.
      if self.positionTotalX is None:
        self.positionTotalX = 0.
      if self.positionTotalY is None:
        self.positionTotalY = 0.
      if self.speedX is None:
        self.speedX = 0.
      if self.speedY is None:
        self.speedY = 0.
      if self.framerate is None:
        self.framerate = 0
      if self.shutter is None:
        self.shutter = 0
      if self.illumination is None:
        self.illumination = 0
      if self.rawData is None:
        self.rawData = 0
      if self.data is None:
        self.data = 0
    else:
      self.state = 0
      self.uptime = 0.
      self.movementX = 0.
      self.movementY = 0.
      self.timeOfMovementReset = 0
      self.positionX = 0.
      self.positionY = 0.
      self.timeOfPositionReset = 0
      self.movementTotalX = 0.
      self.movementTotalY = 0.
      self.positionTotalX = 0.
      self.positionTotalY = 0.
      self.speedX = 0.
      self.speedY = 0.
      self.framerate = 0
      self.shutter = 0
      self.illumination = 0
      self.rawData = 0
      self.data = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B3dI2dI6d3BIB.pack(_x.state, _x.uptime, _x.movementX, _x.movementY, _x.timeOfMovementReset, _x.positionX, _x.positionY, _x.timeOfPositionReset, _x.movementTotalX, _x.movementTotalY, _x.positionTotalX, _x.positionTotalY, _x.speedX, _x.speedY, _x.framerate, _x.shutter, _x.illumination, _x.rawData, _x.data))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 105
      (_x.state, _x.uptime, _x.movementX, _x.movementY, _x.timeOfMovementReset, _x.positionX, _x.positionY, _x.timeOfPositionReset, _x.movementTotalX, _x.movementTotalY, _x.positionTotalX, _x.positionTotalY, _x.speedX, _x.speedY, _x.framerate, _x.shutter, _x.illumination, _x.rawData, _x.data,) = _struct_B3dI2dI6d3BIB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B3dI2dI6d3BIB.pack(_x.state, _x.uptime, _x.movementX, _x.movementY, _x.timeOfMovementReset, _x.positionX, _x.positionY, _x.timeOfPositionReset, _x.movementTotalX, _x.movementTotalY, _x.positionTotalX, _x.positionTotalY, _x.speedX, _x.speedY, _x.framerate, _x.shutter, _x.illumination, _x.rawData, _x.data))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 105
      (_x.state, _x.uptime, _x.movementX, _x.movementY, _x.timeOfMovementReset, _x.positionX, _x.positionY, _x.timeOfPositionReset, _x.movementTotalX, _x.movementTotalY, _x.positionTotalX, _x.positionTotalY, _x.speedX, _x.speedY, _x.framerate, _x.shutter, _x.illumination, _x.rawData, _x.data,) = _struct_B3dI2dI6d3BIB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B3dI2dI6d3BIB = struct.Struct("<B3dI2dI6d3BIB")

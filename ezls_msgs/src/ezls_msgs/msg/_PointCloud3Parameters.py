"""autogenerated by genpy from ezls_msgs/PointCloud3Parameters.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import ezls_msgs.msg

class PointCloud3Parameters(genpy.Message):
  _md5sum = "84be99d6ee6ba49d2dd811269ccc988a"
  _type = "ezls_msgs/PointCloud3Parameters"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#ID of the point cloud
uint32 id

#Number of points in point cloud
uint32 numPoints

#Descriptor if the point cloud
string descriptor

#Absolute Timestamp of begin of point recording
float64 timestampBegin

#Absolute Timestamp of end of point recording
float64 timestampEnd

#Direction of point acquisition
int8 acquisitionDirection

#Global 3D Vehicle state at begin of point recording
Pose3 globalVs3dBegin

#Global 3D Vehicle state at end of point recording
Pose3 globalVs3dEnd

#Global 3D Vehicle state at begin of point recording, relative
Pose3 localVs3dBegin

#Global 3D Vehicle state at end of point recording, relative
Pose3 localVs3dEnd

================================================================================
MSG: ezls_msgs/Pose3
geometry_msgs/Vector3 position
geometry_msgs/Vector3 orientation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['id','numPoints','descriptor','timestampBegin','timestampEnd','acquisitionDirection','globalVs3dBegin','globalVs3dEnd','localVs3dBegin','localVs3dEnd']
  _slot_types = ['uint32','uint32','string','float64','float64','int8','ezls_msgs/Pose3','ezls_msgs/Pose3','ezls_msgs/Pose3','ezls_msgs/Pose3']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,numPoints,descriptor,timestampBegin,timestampEnd,acquisitionDirection,globalVs3dBegin,globalVs3dEnd,localVs3dBegin,localVs3dEnd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PointCloud3Parameters, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.numPoints is None:
        self.numPoints = 0
      if self.descriptor is None:
        self.descriptor = ''
      if self.timestampBegin is None:
        self.timestampBegin = 0.
      if self.timestampEnd is None:
        self.timestampEnd = 0.
      if self.acquisitionDirection is None:
        self.acquisitionDirection = 0
      if self.globalVs3dBegin is None:
        self.globalVs3dBegin = ezls_msgs.msg.Pose3()
      if self.globalVs3dEnd is None:
        self.globalVs3dEnd = ezls_msgs.msg.Pose3()
      if self.localVs3dBegin is None:
        self.localVs3dBegin = ezls_msgs.msg.Pose3()
      if self.localVs3dEnd is None:
        self.localVs3dEnd = ezls_msgs.msg.Pose3()
    else:
      self.id = 0
      self.numPoints = 0
      self.descriptor = ''
      self.timestampBegin = 0.
      self.timestampEnd = 0.
      self.acquisitionDirection = 0
      self.globalVs3dBegin = ezls_msgs.msg.Pose3()
      self.globalVs3dEnd = ezls_msgs.msg.Pose3()
      self.localVs3dBegin = ezls_msgs.msg.Pose3()
      self.localVs3dEnd = ezls_msgs.msg.Pose3()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.id, _x.numPoints))
      _x = self.descriptor
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2db24d.pack(_x.timestampBegin, _x.timestampEnd, _x.acquisitionDirection, _x.globalVs3dBegin.position.x, _x.globalVs3dBegin.position.y, _x.globalVs3dBegin.position.z, _x.globalVs3dBegin.orientation.x, _x.globalVs3dBegin.orientation.y, _x.globalVs3dBegin.orientation.z, _x.globalVs3dEnd.position.x, _x.globalVs3dEnd.position.y, _x.globalVs3dEnd.position.z, _x.globalVs3dEnd.orientation.x, _x.globalVs3dEnd.orientation.y, _x.globalVs3dEnd.orientation.z, _x.localVs3dBegin.position.x, _x.localVs3dBegin.position.y, _x.localVs3dBegin.position.z, _x.localVs3dBegin.orientation.x, _x.localVs3dBegin.orientation.y, _x.localVs3dBegin.orientation.z, _x.localVs3dEnd.position.x, _x.localVs3dEnd.position.y, _x.localVs3dEnd.position.z, _x.localVs3dEnd.orientation.x, _x.localVs3dEnd.orientation.y, _x.localVs3dEnd.orientation.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.globalVs3dBegin is None:
        self.globalVs3dBegin = ezls_msgs.msg.Pose3()
      if self.globalVs3dEnd is None:
        self.globalVs3dEnd = ezls_msgs.msg.Pose3()
      if self.localVs3dBegin is None:
        self.localVs3dBegin = ezls_msgs.msg.Pose3()
      if self.localVs3dEnd is None:
        self.localVs3dEnd = ezls_msgs.msg.Pose3()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.id, _x.numPoints,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.descriptor = str[start:end].decode('utf-8')
      else:
        self.descriptor = str[start:end]
      _x = self
      start = end
      end += 209
      (_x.timestampBegin, _x.timestampEnd, _x.acquisitionDirection, _x.globalVs3dBegin.position.x, _x.globalVs3dBegin.position.y, _x.globalVs3dBegin.position.z, _x.globalVs3dBegin.orientation.x, _x.globalVs3dBegin.orientation.y, _x.globalVs3dBegin.orientation.z, _x.globalVs3dEnd.position.x, _x.globalVs3dEnd.position.y, _x.globalVs3dEnd.position.z, _x.globalVs3dEnd.orientation.x, _x.globalVs3dEnd.orientation.y, _x.globalVs3dEnd.orientation.z, _x.localVs3dBegin.position.x, _x.localVs3dBegin.position.y, _x.localVs3dBegin.position.z, _x.localVs3dBegin.orientation.x, _x.localVs3dBegin.orientation.y, _x.localVs3dBegin.orientation.z, _x.localVs3dEnd.position.x, _x.localVs3dEnd.position.y, _x.localVs3dEnd.position.z, _x.localVs3dEnd.orientation.x, _x.localVs3dEnd.orientation.y, _x.localVs3dEnd.orientation.z,) = _struct_2db24d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.id, _x.numPoints))
      _x = self.descriptor
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2db24d.pack(_x.timestampBegin, _x.timestampEnd, _x.acquisitionDirection, _x.globalVs3dBegin.position.x, _x.globalVs3dBegin.position.y, _x.globalVs3dBegin.position.z, _x.globalVs3dBegin.orientation.x, _x.globalVs3dBegin.orientation.y, _x.globalVs3dBegin.orientation.z, _x.globalVs3dEnd.position.x, _x.globalVs3dEnd.position.y, _x.globalVs3dEnd.position.z, _x.globalVs3dEnd.orientation.x, _x.globalVs3dEnd.orientation.y, _x.globalVs3dEnd.orientation.z, _x.localVs3dBegin.position.x, _x.localVs3dBegin.position.y, _x.localVs3dBegin.position.z, _x.localVs3dBegin.orientation.x, _x.localVs3dBegin.orientation.y, _x.localVs3dBegin.orientation.z, _x.localVs3dEnd.position.x, _x.localVs3dEnd.position.y, _x.localVs3dEnd.position.z, _x.localVs3dEnd.orientation.x, _x.localVs3dEnd.orientation.y, _x.localVs3dEnd.orientation.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.globalVs3dBegin is None:
        self.globalVs3dBegin = ezls_msgs.msg.Pose3()
      if self.globalVs3dEnd is None:
        self.globalVs3dEnd = ezls_msgs.msg.Pose3()
      if self.localVs3dBegin is None:
        self.localVs3dBegin = ezls_msgs.msg.Pose3()
      if self.localVs3dEnd is None:
        self.localVs3dEnd = ezls_msgs.msg.Pose3()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.id, _x.numPoints,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.descriptor = str[start:end].decode('utf-8')
      else:
        self.descriptor = str[start:end]
      _x = self
      start = end
      end += 209
      (_x.timestampBegin, _x.timestampEnd, _x.acquisitionDirection, _x.globalVs3dBegin.position.x, _x.globalVs3dBegin.position.y, _x.globalVs3dBegin.position.z, _x.globalVs3dBegin.orientation.x, _x.globalVs3dBegin.orientation.y, _x.globalVs3dBegin.orientation.z, _x.globalVs3dEnd.position.x, _x.globalVs3dEnd.position.y, _x.globalVs3dEnd.position.z, _x.globalVs3dEnd.orientation.x, _x.globalVs3dEnd.orientation.y, _x.globalVs3dEnd.orientation.z, _x.localVs3dBegin.position.x, _x.localVs3dBegin.position.y, _x.localVs3dBegin.position.z, _x.localVs3dBegin.orientation.x, _x.localVs3dBegin.orientation.y, _x.localVs3dBegin.orientation.z, _x.localVs3dEnd.position.x, _x.localVs3dEnd.position.y, _x.localVs3dEnd.position.z, _x.localVs3dEnd.orientation.x, _x.localVs3dEnd.orientation.y, _x.localVs3dEnd.orientation.z,) = _struct_2db24d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2db24d = struct.Struct("<2db24d")
_struct_2I = struct.Struct("<2I")

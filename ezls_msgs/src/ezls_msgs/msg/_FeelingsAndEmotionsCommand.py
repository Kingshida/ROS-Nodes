"""autogenerated by genpy from ezls_msgs/FeelingsAndEmotionsCommand.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FeelingsAndEmotionsCommand(genpy.Message):
  _md5sum = "47062a4b463ed378c596eae95aa42228"
  _type = "ezls_msgs/FeelingsAndEmotionsCommand"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 timestamp
int32 command


# Parameter set for FaE Rollover
float64 hDecay_rollOver
float64 hDecay_tiltOver
float64 hCoefficient_rollOver
float64 hCoefficient_tiltOver
float64 eCoefficient_rollOver
float64 eCoefficient_tiltOver
float64 fCoefficient_rollOver
float64 fCoefficient_tiltOver

"""
  __slots__ = ['timestamp','command','hDecay_rollOver','hDecay_tiltOver','hCoefficient_rollOver','hCoefficient_tiltOver','eCoefficient_rollOver','eCoefficient_tiltOver','fCoefficient_rollOver','fCoefficient_tiltOver']
  _slot_types = ['float64','int32','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,command,hDecay_rollOver,hDecay_tiltOver,hCoefficient_rollOver,hCoefficient_tiltOver,eCoefficient_rollOver,eCoefficient_tiltOver,fCoefficient_rollOver,fCoefficient_tiltOver

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FeelingsAndEmotionsCommand, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0.
      if self.command is None:
        self.command = 0
      if self.hDecay_rollOver is None:
        self.hDecay_rollOver = 0.
      if self.hDecay_tiltOver is None:
        self.hDecay_tiltOver = 0.
      if self.hCoefficient_rollOver is None:
        self.hCoefficient_rollOver = 0.
      if self.hCoefficient_tiltOver is None:
        self.hCoefficient_tiltOver = 0.
      if self.eCoefficient_rollOver is None:
        self.eCoefficient_rollOver = 0.
      if self.eCoefficient_tiltOver is None:
        self.eCoefficient_tiltOver = 0.
      if self.fCoefficient_rollOver is None:
        self.fCoefficient_rollOver = 0.
      if self.fCoefficient_tiltOver is None:
        self.fCoefficient_tiltOver = 0.
    else:
      self.timestamp = 0.
      self.command = 0
      self.hDecay_rollOver = 0.
      self.hDecay_tiltOver = 0.
      self.hCoefficient_rollOver = 0.
      self.hCoefficient_tiltOver = 0.
      self.eCoefficient_rollOver = 0.
      self.eCoefficient_tiltOver = 0.
      self.fCoefficient_rollOver = 0.
      self.fCoefficient_tiltOver = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_di8d.pack(_x.timestamp, _x.command, _x.hDecay_rollOver, _x.hDecay_tiltOver, _x.hCoefficient_rollOver, _x.hCoefficient_tiltOver, _x.eCoefficient_rollOver, _x.eCoefficient_tiltOver, _x.fCoefficient_rollOver, _x.fCoefficient_tiltOver))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 76
      (_x.timestamp, _x.command, _x.hDecay_rollOver, _x.hDecay_tiltOver, _x.hCoefficient_rollOver, _x.hCoefficient_tiltOver, _x.eCoefficient_rollOver, _x.eCoefficient_tiltOver, _x.fCoefficient_rollOver, _x.fCoefficient_tiltOver,) = _struct_di8d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_di8d.pack(_x.timestamp, _x.command, _x.hDecay_rollOver, _x.hDecay_tiltOver, _x.hCoefficient_rollOver, _x.hCoefficient_tiltOver, _x.eCoefficient_rollOver, _x.eCoefficient_tiltOver, _x.fCoefficient_rollOver, _x.fCoefficient_tiltOver))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 76
      (_x.timestamp, _x.command, _x.hDecay_rollOver, _x.hDecay_tiltOver, _x.hCoefficient_rollOver, _x.hCoefficient_tiltOver, _x.eCoefficient_rollOver, _x.eCoefficient_tiltOver, _x.fCoefficient_rollOver, _x.fCoefficient_tiltOver,) = _struct_di8d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_di8d = struct.Struct("<di8d")

"""autogenerated by genpy from ezls_msgs/ActuatorControlState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ActuatorControlState(genpy.Message):
  _md5sum = "1e8a80f08ab094f99674e19360fb21b3"
  _type = "ezls_msgs/ActuatorControlState"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header      header
uint8       state
string      state_string
uint8       running_state
string      running_state_string
uint8       waiting_state
string      waiting_state_string
float64     speed
float64     heading_rad
float64     heading_deg
uint8       gear
string      gear_string
uint8       direction_mode
string      direction_mode_string
uint8       operation_mode
string      operation_mode_string


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','state','state_string','running_state','running_state_string','waiting_state','waiting_state_string','speed','heading_rad','heading_deg','gear','gear_string','direction_mode','direction_mode_string','operation_mode','operation_mode_string']
  _slot_types = ['std_msgs/Header','uint8','string','uint8','string','uint8','string','float64','float64','float64','uint8','string','uint8','string','uint8','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,state,state_string,running_state,running_state_string,waiting_state,waiting_state_string,speed,heading_rad,heading_deg,gear,gear_string,direction_mode,direction_mode_string,operation_mode,operation_mode_string

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ActuatorControlState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.state is None:
        self.state = 0
      if self.state_string is None:
        self.state_string = ''
      if self.running_state is None:
        self.running_state = 0
      if self.running_state_string is None:
        self.running_state_string = ''
      if self.waiting_state is None:
        self.waiting_state = 0
      if self.waiting_state_string is None:
        self.waiting_state_string = ''
      if self.speed is None:
        self.speed = 0.
      if self.heading_rad is None:
        self.heading_rad = 0.
      if self.heading_deg is None:
        self.heading_deg = 0.
      if self.gear is None:
        self.gear = 0
      if self.gear_string is None:
        self.gear_string = ''
      if self.direction_mode is None:
        self.direction_mode = 0
      if self.direction_mode_string is None:
        self.direction_mode_string = ''
      if self.operation_mode is None:
        self.operation_mode = 0
      if self.operation_mode_string is None:
        self.operation_mode_string = ''
    else:
      self.header = std_msgs.msg.Header()
      self.state = 0
      self.state_string = ''
      self.running_state = 0
      self.running_state_string = ''
      self.waiting_state = 0
      self.waiting_state_string = ''
      self.speed = 0.
      self.heading_rad = 0.
      self.heading_deg = 0.
      self.gear = 0
      self.gear_string = ''
      self.direction_mode = 0
      self.direction_mode_string = ''
      self.operation_mode = 0
      self.operation_mode_string = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.state))
      _x = self.state_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.running_state))
      _x = self.running_state_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.waiting_state))
      _x = self.waiting_state_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3dB.pack(_x.speed, _x.heading_rad, _x.heading_deg, _x.gear))
      _x = self.gear_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.direction_mode))
      _x = self.direction_mode_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.operation_mode))
      _x = self.operation_mode_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.state,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_string = str[start:end].decode('utf-8')
      else:
        self.state_string = str[start:end]
      start = end
      end += 1
      (self.running_state,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.running_state_string = str[start:end].decode('utf-8')
      else:
        self.running_state_string = str[start:end]
      start = end
      end += 1
      (self.waiting_state,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.waiting_state_string = str[start:end].decode('utf-8')
      else:
        self.waiting_state_string = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.speed, _x.heading_rad, _x.heading_deg, _x.gear,) = _struct_3dB.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gear_string = str[start:end].decode('utf-8')
      else:
        self.gear_string = str[start:end]
      start = end
      end += 1
      (self.direction_mode,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.direction_mode_string = str[start:end].decode('utf-8')
      else:
        self.direction_mode_string = str[start:end]
      start = end
      end += 1
      (self.operation_mode,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.operation_mode_string = str[start:end].decode('utf-8')
      else:
        self.operation_mode_string = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.state))
      _x = self.state_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.running_state))
      _x = self.running_state_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.waiting_state))
      _x = self.waiting_state_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3dB.pack(_x.speed, _x.heading_rad, _x.heading_deg, _x.gear))
      _x = self.gear_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.direction_mode))
      _x = self.direction_mode_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.operation_mode))
      _x = self.operation_mode_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.state,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_string = str[start:end].decode('utf-8')
      else:
        self.state_string = str[start:end]
      start = end
      end += 1
      (self.running_state,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.running_state_string = str[start:end].decode('utf-8')
      else:
        self.running_state_string = str[start:end]
      start = end
      end += 1
      (self.waiting_state,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.waiting_state_string = str[start:end].decode('utf-8')
      else:
        self.waiting_state_string = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.speed, _x.heading_rad, _x.heading_deg, _x.gear,) = _struct_3dB.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gear_string = str[start:end].decode('utf-8')
      else:
        self.gear_string = str[start:end]
      start = end
      end += 1
      (self.direction_mode,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.direction_mode_string = str[start:end].decode('utf-8')
      else:
        self.direction_mode_string = str[start:end]
      start = end
      end += 1
      (self.operation_mode,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.operation_mode_string = str[start:end].decode('utf-8')
      else:
        self.operation_mode_string = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_B = struct.Struct("<B")
_struct_3dB = struct.Struct("<3dB")

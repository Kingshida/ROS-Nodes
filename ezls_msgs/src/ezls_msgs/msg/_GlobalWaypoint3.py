"""autogenerated by genpy from ezls_msgs/GlobalWaypoint3.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import ezls_msgs.msg

class GlobalWaypoint3(genpy.Message):
  _md5sum = "722843febefacb7a445b17a1d5a87be1"
  _type = "ezls_msgs/GlobalWaypoint3"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Pose3 of waypoint
ezls_msgs/Pose3 pose

# ID of waypoint
int32 id

# Type of waypoint
uint32 type

# Is waypoint reached
bool reached

# Distance to be reached
float64 reachingDistance

#Event number
int32 event


================================================================================
MSG: ezls_msgs/Pose3
geometry_msgs/Vector3 position
geometry_msgs/Vector3 orientation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['pose','id','type','reached','reachingDistance','event']
  _slot_types = ['ezls_msgs/Pose3','int32','uint32','bool','float64','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pose,id,type,reached,reachingDistance,event

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GlobalWaypoint3, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pose is None:
        self.pose = ezls_msgs.msg.Pose3()
      if self.id is None:
        self.id = 0
      if self.type is None:
        self.type = 0
      if self.reached is None:
        self.reached = False
      if self.reachingDistance is None:
        self.reachingDistance = 0.
      if self.event is None:
        self.event = 0
    else:
      self.pose = ezls_msgs.msg.Pose3()
      self.id = 0
      self.type = 0
      self.reached = False
      self.reachingDistance = 0.
      self.event = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6diIBdi.pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.id, _x.type, _x.reached, _x.reachingDistance, _x.event))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pose is None:
        self.pose = ezls_msgs.msg.Pose3()
      end = 0
      _x = self
      start = end
      end += 69
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.id, _x.type, _x.reached, _x.reachingDistance, _x.event,) = _struct_6diIBdi.unpack(str[start:end])
      self.reached = bool(self.reached)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6diIBdi.pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.id, _x.type, _x.reached, _x.reachingDistance, _x.event))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pose is None:
        self.pose = ezls_msgs.msg.Pose3()
      end = 0
      _x = self
      start = end
      end += 69
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.id, _x.type, _x.reached, _x.reachingDistance, _x.event,) = _struct_6diIBdi.unpack(str[start:end])
      self.reached = bool(self.reached)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6diIBdi = struct.Struct("<6diIBdi")

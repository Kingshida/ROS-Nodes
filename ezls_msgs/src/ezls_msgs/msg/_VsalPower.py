"""autogenerated by genpy from ezls_msgs/VsalPower.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VsalPower(genpy.Message):
  _md5sum = "aff678c4a0a68f9248a81463f7f2ef13"
  _type = "ezls_msgs/VsalPower"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8   state
float64 uptime
uint8   mosfetState
float64 voltage1
float64 current1
float64 voltage2
float64 current2
float64 voltage3

"""
  __slots__ = ['state','uptime','mosfetState','voltage1','current1','voltage2','current2','voltage3']
  _slot_types = ['uint8','float64','uint8','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state,uptime,mosfetState,voltage1,current1,voltage2,current2,voltage3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VsalPower, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = 0
      if self.uptime is None:
        self.uptime = 0.
      if self.mosfetState is None:
        self.mosfetState = 0
      if self.voltage1 is None:
        self.voltage1 = 0.
      if self.current1 is None:
        self.current1 = 0.
      if self.voltage2 is None:
        self.voltage2 = 0.
      if self.current2 is None:
        self.current2 = 0.
      if self.voltage3 is None:
        self.voltage3 = 0.
    else:
      self.state = 0
      self.uptime = 0.
      self.mosfetState = 0
      self.voltage1 = 0.
      self.current1 = 0.
      self.voltage2 = 0.
      self.current2 = 0.
      self.voltage3 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_BdB5d.pack(_x.state, _x.uptime, _x.mosfetState, _x.voltage1, _x.current1, _x.voltage2, _x.current2, _x.voltage3))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 50
      (_x.state, _x.uptime, _x.mosfetState, _x.voltage1, _x.current1, _x.voltage2, _x.current2, _x.voltage3,) = _struct_BdB5d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_BdB5d.pack(_x.state, _x.uptime, _x.mosfetState, _x.voltage1, _x.current1, _x.voltage2, _x.current2, _x.voltage3))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 50
      (_x.state, _x.uptime, _x.mosfetState, _x.voltage1, _x.current1, _x.voltage2, _x.current2, _x.voltage3,) = _struct_BdB5d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_BdB5d = struct.Struct("<BdB5d")

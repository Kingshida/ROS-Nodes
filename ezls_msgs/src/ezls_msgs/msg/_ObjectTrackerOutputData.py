"""autogenerated by genpy from ezls_msgs/ObjectTrackerOutputData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class ObjectTrackerOutputData(genpy.Message):
  _md5sum = "286b3fece64eb32cf78f5c99e62844d3"
  _type = "ezls_msgs/ObjectTrackerOutputData"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

# Proposed speed to track an object [m/s].
float64 proposed_speed

# Proposed heading to track an object [-pi,pi].
float64 proposed_heading

# Proposed tilt angle of LMS1
float64 proposed_lms_tilt

# Current robot speed [m/s].
float64 current_speed

# Direction of movement.
uint8 direction

# Tracker status.
uint8 status

# First LMS-Beam to object.
uint32 l_beam

# Last LMS-Beam to object.
uint32 r_beam

# First point of object.
geometry_msgs/Vector3 left

# Calculated middle point of object.
geometry_msgs/Vector3 calculated_middle

# Last point of object.
geometry_msgs/Vector3 right

# Mean point of the object.
geometry_msgs/Vector3 mean

# Security zone parallelogram corner points.
geometry_msgs/Vector3[4] security_zone

# Number of input measurement points.
uint32 num_in_points

# Input measurement points.
geometry_msgs/Vector3[181] in_points

# Current scanline.
string scanline

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['header','proposed_speed','proposed_heading','proposed_lms_tilt','current_speed','direction','status','l_beam','r_beam','left','calculated_middle','right','mean','security_zone','num_in_points','in_points','scanline']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','uint8','uint8','uint32','uint32','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3[4]','uint32','geometry_msgs/Vector3[181]','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,proposed_speed,proposed_heading,proposed_lms_tilt,current_speed,direction,status,l_beam,r_beam,left,calculated_middle,right,mean,security_zone,num_in_points,in_points,scanline

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectTrackerOutputData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.proposed_speed is None:
        self.proposed_speed = 0.
      if self.proposed_heading is None:
        self.proposed_heading = 0.
      if self.proposed_lms_tilt is None:
        self.proposed_lms_tilt = 0.
      if self.current_speed is None:
        self.current_speed = 0.
      if self.direction is None:
        self.direction = 0
      if self.status is None:
        self.status = 0
      if self.l_beam is None:
        self.l_beam = 0
      if self.r_beam is None:
        self.r_beam = 0
      if self.left is None:
        self.left = geometry_msgs.msg.Vector3()
      if self.calculated_middle is None:
        self.calculated_middle = geometry_msgs.msg.Vector3()
      if self.right is None:
        self.right = geometry_msgs.msg.Vector3()
      if self.mean is None:
        self.mean = geometry_msgs.msg.Vector3()
      if self.security_zone is None:
        self.security_zone = [geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3()]
      if self.num_in_points is None:
        self.num_in_points = 0
      if self.in_points is None:
        self.in_points = [geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3()]
      if self.scanline is None:
        self.scanline = ''
    else:
      self.header = std_msgs.msg.Header()
      self.proposed_speed = 0.
      self.proposed_heading = 0.
      self.proposed_lms_tilt = 0.
      self.current_speed = 0.
      self.direction = 0
      self.status = 0
      self.l_beam = 0
      self.r_beam = 0
      self.left = geometry_msgs.msg.Vector3()
      self.calculated_middle = geometry_msgs.msg.Vector3()
      self.right = geometry_msgs.msg.Vector3()
      self.mean = geometry_msgs.msg.Vector3()
      self.security_zone = [geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3()]
      self.num_in_points = 0
      self.in_points = [geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3()]
      self.scanline = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4d2B2I12d.pack(_x.proposed_speed, _x.proposed_heading, _x.proposed_lms_tilt, _x.current_speed, _x.direction, _x.status, _x.l_beam, _x.r_beam, _x.left.x, _x.left.y, _x.left.z, _x.calculated_middle.x, _x.calculated_middle.y, _x.calculated_middle.z, _x.right.x, _x.right.y, _x.right.z, _x.mean.x, _x.mean.y, _x.mean.z))
      for val1 in self.security_zone:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      buff.write(_struct_I.pack(self.num_in_points))
      for val1 in self.in_points:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self.scanline
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left is None:
        self.left = geometry_msgs.msg.Vector3()
      if self.calculated_middle is None:
        self.calculated_middle = geometry_msgs.msg.Vector3()
      if self.right is None:
        self.right = geometry_msgs.msg.Vector3()
      if self.mean is None:
        self.mean = geometry_msgs.msg.Vector3()
      if self.security_zone is None:
        self.security_zone = None
      if self.in_points is None:
        self.in_points = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 138
      (_x.proposed_speed, _x.proposed_heading, _x.proposed_lms_tilt, _x.current_speed, _x.direction, _x.status, _x.l_beam, _x.r_beam, _x.left.x, _x.left.y, _x.left.z, _x.calculated_middle.x, _x.calculated_middle.y, _x.calculated_middle.z, _x.right.x, _x.right.y, _x.right.z, _x.mean.x, _x.mean.y, _x.mean.z,) = _struct_4d2B2I12d.unpack(str[start:end])
      self.security_zone = []
      for i in range(0, 4):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.security_zone.append(val1)
      start = end
      end += 4
      (self.num_in_points,) = _struct_I.unpack(str[start:end])
      self.in_points = []
      for i in range(0, 181):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.in_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.scanline = str[start:end].decode('utf-8')
      else:
        self.scanline = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4d2B2I12d.pack(_x.proposed_speed, _x.proposed_heading, _x.proposed_lms_tilt, _x.current_speed, _x.direction, _x.status, _x.l_beam, _x.r_beam, _x.left.x, _x.left.y, _x.left.z, _x.calculated_middle.x, _x.calculated_middle.y, _x.calculated_middle.z, _x.right.x, _x.right.y, _x.right.z, _x.mean.x, _x.mean.y, _x.mean.z))
      for val1 in self.security_zone:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      buff.write(_struct_I.pack(self.num_in_points))
      for val1 in self.in_points:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self.scanline
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left is None:
        self.left = geometry_msgs.msg.Vector3()
      if self.calculated_middle is None:
        self.calculated_middle = geometry_msgs.msg.Vector3()
      if self.right is None:
        self.right = geometry_msgs.msg.Vector3()
      if self.mean is None:
        self.mean = geometry_msgs.msg.Vector3()
      if self.security_zone is None:
        self.security_zone = None
      if self.in_points is None:
        self.in_points = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 138
      (_x.proposed_speed, _x.proposed_heading, _x.proposed_lms_tilt, _x.current_speed, _x.direction, _x.status, _x.l_beam, _x.r_beam, _x.left.x, _x.left.y, _x.left.z, _x.calculated_middle.x, _x.calculated_middle.y, _x.calculated_middle.z, _x.right.x, _x.right.y, _x.right.z, _x.mean.x, _x.mean.y, _x.mean.z,) = _struct_4d2B2I12d.unpack(str[start:end])
      self.security_zone = []
      for i in range(0, 4):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.security_zone.append(val1)
      start = end
      end += 4
      (self.num_in_points,) = _struct_I.unpack(str[start:end])
      self.in_points = []
      for i in range(0, 181):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.in_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.scanline = str[start:end].decode('utf-8')
      else:
        self.scanline = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_4d2B2I12d = struct.Struct("<4d2B2I12d")
_struct_3d = struct.Struct("<3d")

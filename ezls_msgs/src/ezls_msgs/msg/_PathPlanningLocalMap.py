"""autogenerated by genpy from ezls_msgs/PathPlanningLocalMap.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg
import ezls_msgs.msg
import sensor_msgs.msg

class PathPlanningLocalMap(genpy.Message):
  _md5sum = "7cf75e60d46c70b901925bea55277eae"
  _type = "ezls_msgs/PathPlanningLocalMap"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """sensor_msgs/PointCloud2 pointCloud
PointCloud3Parameters params
uint32 numLoD
geometry_msgs/Vector3 resolution
geometry_msgs/Vector3 minimalBounds
geometry_msgs/Vector3 maximalBounds
geometry_msgs/Vector3 vehicleSize
float64 maxInterCellHeightDifference

================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

================================================================================
MSG: ezls_msgs/PointCloud3Parameters
#ID of the point cloud
uint32 id

#Number of points in point cloud
uint32 numPoints

#Descriptor if the point cloud
string descriptor

#Absolute Timestamp of begin of point recording
float64 timestampBegin

#Absolute Timestamp of end of point recording
float64 timestampEnd

#Direction of point acquisition
int8 acquisitionDirection

#Global 3D Vehicle state at begin of point recording
Pose3 globalVs3dBegin

#Global 3D Vehicle state at end of point recording
Pose3 globalVs3dEnd

#Global 3D Vehicle state at begin of point recording, relative
Pose3 localVs3dBegin

#Global 3D Vehicle state at end of point recording, relative
Pose3 localVs3dEnd

================================================================================
MSG: ezls_msgs/Pose3
geometry_msgs/Vector3 position
geometry_msgs/Vector3 orientation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['pointCloud','params','numLoD','resolution','minimalBounds','maximalBounds','vehicleSize','maxInterCellHeightDifference']
  _slot_types = ['sensor_msgs/PointCloud2','ezls_msgs/PointCloud3Parameters','uint32','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pointCloud,params,numLoD,resolution,minimalBounds,maximalBounds,vehicleSize,maxInterCellHeightDifference

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PathPlanningLocalMap, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pointCloud is None:
        self.pointCloud = sensor_msgs.msg.PointCloud2()
      if self.params is None:
        self.params = ezls_msgs.msg.PointCloud3Parameters()
      if self.numLoD is None:
        self.numLoD = 0
      if self.resolution is None:
        self.resolution = geometry_msgs.msg.Vector3()
      if self.minimalBounds is None:
        self.minimalBounds = geometry_msgs.msg.Vector3()
      if self.maximalBounds is None:
        self.maximalBounds = geometry_msgs.msg.Vector3()
      if self.vehicleSize is None:
        self.vehicleSize = geometry_msgs.msg.Vector3()
      if self.maxInterCellHeightDifference is None:
        self.maxInterCellHeightDifference = 0.
    else:
      self.pointCloud = sensor_msgs.msg.PointCloud2()
      self.params = ezls_msgs.msg.PointCloud3Parameters()
      self.numLoD = 0
      self.resolution = geometry_msgs.msg.Vector3()
      self.minimalBounds = geometry_msgs.msg.Vector3()
      self.maximalBounds = geometry_msgs.msg.Vector3()
      self.vehicleSize = geometry_msgs.msg.Vector3()
      self.maxInterCellHeightDifference = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.pointCloud.header.seq, _x.pointCloud.header.stamp.secs, _x.pointCloud.header.stamp.nsecs))
      _x = self.pointCloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.pointCloud.height, _x.pointCloud.width))
      length = len(self.pointCloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.pointCloud.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_struct_B2I.pack(_x.pointCloud.is_bigendian, _x.pointCloud.point_step, _x.pointCloud.row_step))
      _x = self.pointCloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B2I.pack(_x.pointCloud.is_dense, _x.params.id, _x.params.numPoints))
      _x = self.params.descriptor
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2db24dI13d.pack(_x.params.timestampBegin, _x.params.timestampEnd, _x.params.acquisitionDirection, _x.params.globalVs3dBegin.position.x, _x.params.globalVs3dBegin.position.y, _x.params.globalVs3dBegin.position.z, _x.params.globalVs3dBegin.orientation.x, _x.params.globalVs3dBegin.orientation.y, _x.params.globalVs3dBegin.orientation.z, _x.params.globalVs3dEnd.position.x, _x.params.globalVs3dEnd.position.y, _x.params.globalVs3dEnd.position.z, _x.params.globalVs3dEnd.orientation.x, _x.params.globalVs3dEnd.orientation.y, _x.params.globalVs3dEnd.orientation.z, _x.params.localVs3dBegin.position.x, _x.params.localVs3dBegin.position.y, _x.params.localVs3dBegin.position.z, _x.params.localVs3dBegin.orientation.x, _x.params.localVs3dBegin.orientation.y, _x.params.localVs3dBegin.orientation.z, _x.params.localVs3dEnd.position.x, _x.params.localVs3dEnd.position.y, _x.params.localVs3dEnd.position.z, _x.params.localVs3dEnd.orientation.x, _x.params.localVs3dEnd.orientation.y, _x.params.localVs3dEnd.orientation.z, _x.numLoD, _x.resolution.x, _x.resolution.y, _x.resolution.z, _x.minimalBounds.x, _x.minimalBounds.y, _x.minimalBounds.z, _x.maximalBounds.x, _x.maximalBounds.y, _x.maximalBounds.z, _x.vehicleSize.x, _x.vehicleSize.y, _x.vehicleSize.z, _x.maxInterCellHeightDifference))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pointCloud is None:
        self.pointCloud = sensor_msgs.msg.PointCloud2()
      if self.params is None:
        self.params = ezls_msgs.msg.PointCloud3Parameters()
      if self.resolution is None:
        self.resolution = geometry_msgs.msg.Vector3()
      if self.minimalBounds is None:
        self.minimalBounds = geometry_msgs.msg.Vector3()
      if self.maximalBounds is None:
        self.maximalBounds = geometry_msgs.msg.Vector3()
      if self.vehicleSize is None:
        self.vehicleSize = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.pointCloud.header.seq, _x.pointCloud.header.stamp.secs, _x.pointCloud.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pointCloud.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pointCloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.pointCloud.height, _x.pointCloud.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pointCloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
        self.pointCloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.pointCloud.is_bigendian, _x.pointCloud.point_step, _x.pointCloud.row_step,) = _struct_B2I.unpack(str[start:end])
      self.pointCloud.is_bigendian = bool(self.pointCloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pointCloud.data = str[start:end].decode('utf-8')
      else:
        self.pointCloud.data = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.pointCloud.is_dense, _x.params.id, _x.params.numPoints,) = _struct_B2I.unpack(str[start:end])
      self.pointCloud.is_dense = bool(self.pointCloud.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.params.descriptor = str[start:end].decode('utf-8')
      else:
        self.params.descriptor = str[start:end]
      _x = self
      start = end
      end += 317
      (_x.params.timestampBegin, _x.params.timestampEnd, _x.params.acquisitionDirection, _x.params.globalVs3dBegin.position.x, _x.params.globalVs3dBegin.position.y, _x.params.globalVs3dBegin.position.z, _x.params.globalVs3dBegin.orientation.x, _x.params.globalVs3dBegin.orientation.y, _x.params.globalVs3dBegin.orientation.z, _x.params.globalVs3dEnd.position.x, _x.params.globalVs3dEnd.position.y, _x.params.globalVs3dEnd.position.z, _x.params.globalVs3dEnd.orientation.x, _x.params.globalVs3dEnd.orientation.y, _x.params.globalVs3dEnd.orientation.z, _x.params.localVs3dBegin.position.x, _x.params.localVs3dBegin.position.y, _x.params.localVs3dBegin.position.z, _x.params.localVs3dBegin.orientation.x, _x.params.localVs3dBegin.orientation.y, _x.params.localVs3dBegin.orientation.z, _x.params.localVs3dEnd.position.x, _x.params.localVs3dEnd.position.y, _x.params.localVs3dEnd.position.z, _x.params.localVs3dEnd.orientation.x, _x.params.localVs3dEnd.orientation.y, _x.params.localVs3dEnd.orientation.z, _x.numLoD, _x.resolution.x, _x.resolution.y, _x.resolution.z, _x.minimalBounds.x, _x.minimalBounds.y, _x.minimalBounds.z, _x.maximalBounds.x, _x.maximalBounds.y, _x.maximalBounds.z, _x.vehicleSize.x, _x.vehicleSize.y, _x.vehicleSize.z, _x.maxInterCellHeightDifference,) = _struct_2db24dI13d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.pointCloud.header.seq, _x.pointCloud.header.stamp.secs, _x.pointCloud.header.stamp.nsecs))
      _x = self.pointCloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.pointCloud.height, _x.pointCloud.width))
      length = len(self.pointCloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.pointCloud.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_struct_B2I.pack(_x.pointCloud.is_bigendian, _x.pointCloud.point_step, _x.pointCloud.row_step))
      _x = self.pointCloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B2I.pack(_x.pointCloud.is_dense, _x.params.id, _x.params.numPoints))
      _x = self.params.descriptor
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2db24dI13d.pack(_x.params.timestampBegin, _x.params.timestampEnd, _x.params.acquisitionDirection, _x.params.globalVs3dBegin.position.x, _x.params.globalVs3dBegin.position.y, _x.params.globalVs3dBegin.position.z, _x.params.globalVs3dBegin.orientation.x, _x.params.globalVs3dBegin.orientation.y, _x.params.globalVs3dBegin.orientation.z, _x.params.globalVs3dEnd.position.x, _x.params.globalVs3dEnd.position.y, _x.params.globalVs3dEnd.position.z, _x.params.globalVs3dEnd.orientation.x, _x.params.globalVs3dEnd.orientation.y, _x.params.globalVs3dEnd.orientation.z, _x.params.localVs3dBegin.position.x, _x.params.localVs3dBegin.position.y, _x.params.localVs3dBegin.position.z, _x.params.localVs3dBegin.orientation.x, _x.params.localVs3dBegin.orientation.y, _x.params.localVs3dBegin.orientation.z, _x.params.localVs3dEnd.position.x, _x.params.localVs3dEnd.position.y, _x.params.localVs3dEnd.position.z, _x.params.localVs3dEnd.orientation.x, _x.params.localVs3dEnd.orientation.y, _x.params.localVs3dEnd.orientation.z, _x.numLoD, _x.resolution.x, _x.resolution.y, _x.resolution.z, _x.minimalBounds.x, _x.minimalBounds.y, _x.minimalBounds.z, _x.maximalBounds.x, _x.maximalBounds.y, _x.maximalBounds.z, _x.vehicleSize.x, _x.vehicleSize.y, _x.vehicleSize.z, _x.maxInterCellHeightDifference))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pointCloud is None:
        self.pointCloud = sensor_msgs.msg.PointCloud2()
      if self.params is None:
        self.params = ezls_msgs.msg.PointCloud3Parameters()
      if self.resolution is None:
        self.resolution = geometry_msgs.msg.Vector3()
      if self.minimalBounds is None:
        self.minimalBounds = geometry_msgs.msg.Vector3()
      if self.maximalBounds is None:
        self.maximalBounds = geometry_msgs.msg.Vector3()
      if self.vehicleSize is None:
        self.vehicleSize = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.pointCloud.header.seq, _x.pointCloud.header.stamp.secs, _x.pointCloud.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pointCloud.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pointCloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.pointCloud.height, _x.pointCloud.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pointCloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
        self.pointCloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.pointCloud.is_bigendian, _x.pointCloud.point_step, _x.pointCloud.row_step,) = _struct_B2I.unpack(str[start:end])
      self.pointCloud.is_bigendian = bool(self.pointCloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pointCloud.data = str[start:end].decode('utf-8')
      else:
        self.pointCloud.data = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.pointCloud.is_dense, _x.params.id, _x.params.numPoints,) = _struct_B2I.unpack(str[start:end])
      self.pointCloud.is_dense = bool(self.pointCloud.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.params.descriptor = str[start:end].decode('utf-8')
      else:
        self.params.descriptor = str[start:end]
      _x = self
      start = end
      end += 317
      (_x.params.timestampBegin, _x.params.timestampEnd, _x.params.acquisitionDirection, _x.params.globalVs3dBegin.position.x, _x.params.globalVs3dBegin.position.y, _x.params.globalVs3dBegin.position.z, _x.params.globalVs3dBegin.orientation.x, _x.params.globalVs3dBegin.orientation.y, _x.params.globalVs3dBegin.orientation.z, _x.params.globalVs3dEnd.position.x, _x.params.globalVs3dEnd.position.y, _x.params.globalVs3dEnd.position.z, _x.params.globalVs3dEnd.orientation.x, _x.params.globalVs3dEnd.orientation.y, _x.params.globalVs3dEnd.orientation.z, _x.params.localVs3dBegin.position.x, _x.params.localVs3dBegin.position.y, _x.params.localVs3dBegin.position.z, _x.params.localVs3dBegin.orientation.x, _x.params.localVs3dBegin.orientation.y, _x.params.localVs3dBegin.orientation.z, _x.params.localVs3dEnd.position.x, _x.params.localVs3dEnd.position.y, _x.params.localVs3dEnd.position.z, _x.params.localVs3dEnd.orientation.x, _x.params.localVs3dEnd.orientation.y, _x.params.localVs3dEnd.orientation.z, _x.numLoD, _x.resolution.x, _x.resolution.y, _x.resolution.z, _x.minimalBounds.x, _x.minimalBounds.y, _x.minimalBounds.z, _x.maximalBounds.x, _x.maximalBounds.y, _x.maximalBounds.z, _x.vehicleSize.x, _x.vehicleSize.y, _x.vehicleSize.z, _x.maxInterCellHeightDifference,) = _struct_2db24dI13d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_IBI = struct.Struct("<IBI")
_struct_3I = struct.Struct("<3I")
_struct_2I = struct.Struct("<2I")
_struct_B2I = struct.Struct("<B2I")
_struct_2db24dI13d = struct.Struct("<2db24dI13d")

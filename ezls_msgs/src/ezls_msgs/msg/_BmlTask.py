"""autogenerated by genpy from ezls_msgs/BmlTask.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import genpy
import std_msgs.msg

class BmlTask(genpy.Message):
  _md5sum = "5aa9d0de4f2036343f788441b8ac7739"
  _type = "ezls_msgs/BmlTask"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# ROS Nachrichtenkopf mit Sequenznummer, Zeitstempel und Frameid 
Header header
# BML Befehl: MOVE, PATROL, DSTRBT(Distribute), GUARD, OBSRV(Observing), RECCE(Reconnaisance), DISENG(Aktuelle Bewegung abbrechen und an der aktuellen Position anhalten), IMINGT ("Imagery intelligence gathering" - Bild anfordern)
string type

# eindeutig identifizierbare Bezeichnung des Befehls
string label 

# Die Variablen xxx_prefix enthalten Schluesselwoerter
# zur Spezifizierung des Ausfuehrungszeitpunktes, welcher entweder in den 
# Variablen xxx_label oder xxx_time festgelegt wird. 
# start_prefix: AT, AFT, STREND (Startet mit dem Ende eines anderen Tasks [start_label]),  
# [(not implement) ASAP, ASAPAF, ASAPNL, AT, BEF, NLT, NOB, STRBEF, STRSTR, STRDUR, STREND, STRAFT]
string start_prefix
# end_prefix: AT, AFT, ENDEND (Ended mit dem Ende eines anderen Tasks [end_label]), 
# [(not implement)ASAP, ASAPAF, ASAPNL, BEF, NLT, NOB, ENDBEF, ENDSTR, ENDDUR, ENDAFT]
string end_prefix

# Das Label des Befehls vor/nach/mit dem dieser Befehl ausgefuehrt werden soll.
# Ist nur gesetzt, wenn STREND bzw. ENDEND gesetzt sind.   
string start_label
string end_label

# Start-/Endzeitpunkt der Ausfuehrung des Befehls.
# Dieser ist immer im Zusammenhang mit xxx_prefix zu betrachten.
# Der Jetzt-Zeitpunkt (sofortige Ausfuehrung) wird durch die 0-Zeit definiert.
time start_time
time end_time

# die Bezeichnung des Befehlgebenden 
string tasker

# der Addresat des Befehls. In diesem Fall wird hier der Name des Roboters stehen. 
string taskee

# Liste von GPS Punkten, die fuer die Ausfuehrung des Befehls notwendig sind.
# x => Latitude, y => Longitude 
geometry_msgs/Point[] points

string TYPE_MOVE   = MOVE
string TYPE_PATROL = PATROL
string TYPE_DSTRBT = DSTRBT
string TYPE_GUARD  = GUARD
string TYPE_OBSRV  = OBSRV
string TYPE_RECCE  = RECCE
string TYPE_DISENG = DISENG
string TYPE_IMINGT = IMINGT

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  # Pseudo-constants
  TYPE_MOVE = 'MOVE'
  TYPE_PATROL = 'PATROL'
  TYPE_DSTRBT = 'DSTRBT'
  TYPE_GUARD = 'GUARD'
  TYPE_OBSRV = 'OBSRV'
  TYPE_RECCE = 'RECCE'
  TYPE_DISENG = 'DISENG'
  TYPE_IMINGT = 'IMINGT'

  __slots__ = ['header','type','label','start_prefix','end_prefix','start_label','end_label','start_time','end_time','tasker','taskee','points']
  _slot_types = ['std_msgs/Header','string','string','string','string','string','string','time','time','string','string','geometry_msgs/Point[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,type,label,start_prefix,end_prefix,start_label,end_label,start_time,end_time,tasker,taskee,points

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BmlTask, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.type is None:
        self.type = ''
      if self.label is None:
        self.label = ''
      if self.start_prefix is None:
        self.start_prefix = ''
      if self.end_prefix is None:
        self.end_prefix = ''
      if self.start_label is None:
        self.start_label = ''
      if self.end_label is None:
        self.end_label = ''
      if self.start_time is None:
        self.start_time = genpy.Time()
      if self.end_time is None:
        self.end_time = genpy.Time()
      if self.tasker is None:
        self.tasker = ''
      if self.taskee is None:
        self.taskee = ''
      if self.points is None:
        self.points = []
    else:
      self.header = std_msgs.msg.Header()
      self.type = ''
      self.label = ''
      self.start_prefix = ''
      self.end_prefix = ''
      self.start_label = ''
      self.end_label = ''
      self.start_time = genpy.Time()
      self.end_time = genpy.Time()
      self.tasker = ''
      self.taskee = ''
      self.points = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.start_prefix
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.end_prefix
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.start_label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.end_label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4I.pack(_x.start_time.secs, _x.start_time.nsecs, _x.end_time.secs, _x.end_time.nsecs))
      _x = self.tasker
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.taskee
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.start_time is None:
        self.start_time = genpy.Time()
      if self.end_time is None:
        self.end_time = genpy.Time()
      if self.points is None:
        self.points = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8')
      else:
        self.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8')
      else:
        self.label = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start_prefix = str[start:end].decode('utf-8')
      else:
        self.start_prefix = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.end_prefix = str[start:end].decode('utf-8')
      else:
        self.end_prefix = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start_label = str[start:end].decode('utf-8')
      else:
        self.start_label = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.end_label = str[start:end].decode('utf-8')
      else:
        self.end_label = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.start_time.secs, _x.start_time.nsecs, _x.end_time.secs, _x.end_time.nsecs,) = _struct_4I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tasker = str[start:end].decode('utf-8')
      else:
        self.tasker = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.taskee = str[start:end].decode('utf-8')
      else:
        self.taskee = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.points.append(val1)
      self.start_time.canon()
      self.end_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.start_prefix
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.end_prefix
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.start_label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.end_label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4I.pack(_x.start_time.secs, _x.start_time.nsecs, _x.end_time.secs, _x.end_time.nsecs))
      _x = self.tasker
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.taskee
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.start_time is None:
        self.start_time = genpy.Time()
      if self.end_time is None:
        self.end_time = genpy.Time()
      if self.points is None:
        self.points = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8')
      else:
        self.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8')
      else:
        self.label = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start_prefix = str[start:end].decode('utf-8')
      else:
        self.start_prefix = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.end_prefix = str[start:end].decode('utf-8')
      else:
        self.end_prefix = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start_label = str[start:end].decode('utf-8')
      else:
        self.start_label = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.end_label = str[start:end].decode('utf-8')
      else:
        self.end_label = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.start_time.secs, _x.start_time.nsecs, _x.end_time.secs, _x.end_time.nsecs,) = _struct_4I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tasker = str[start:end].decode('utf-8')
      else:
        self.tasker = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.taskee = str[start:end].decode('utf-8')
      else:
        self.taskee = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.points.append(val1)
      self.start_time.canon()
      self.end_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_3d = struct.Struct("<3d")
_struct_4I = struct.Struct("<4I")

"""autogenerated by genpy from ezls_msgs/FeelingsAndEmotionsOutputData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class FeelingsAndEmotionsOutputData(genpy.Message):
  _md5sum = "fb4e0428af3a2c45d8403c1688cba5da"
  _type = "ezls_msgs/FeelingsAndEmotionsOutputData"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Header information
Header header

# Valence for fear-emotion concerning roll-overs
float64 fearRollOverValence

# Valence for fear-emotion concerning getting lost
float64 fearGettingLostValence

# Feeling valence for Tilt-over
float64 tiltOverFeeling

# Hormone level for Tilt-over
float64 tiltOverHormone

# Feeling valence for Roll-over
float64 rollOverFeeling

# Hormone level for Roll-over
float64 rollOverHormone

# Feeling valence for gps
float64 gpsFeeling

# Hormone level for gsp
float64 gpsHormone

# Feeling valence for dgps
float64 dgpsFeeling

# Hormone level for dgsp
float64 dgpsHormone

# Feeling valence for compass
float64 compassFeeling

# Hormone level for compass
float64 compassHormone


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','fearRollOverValence','fearGettingLostValence','tiltOverFeeling','tiltOverHormone','rollOverFeeling','rollOverHormone','gpsFeeling','gpsHormone','dgpsFeeling','dgpsHormone','compassFeeling','compassHormone']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,fearRollOverValence,fearGettingLostValence,tiltOverFeeling,tiltOverHormone,rollOverFeeling,rollOverHormone,gpsFeeling,gpsHormone,dgpsFeeling,dgpsHormone,compassFeeling,compassHormone

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FeelingsAndEmotionsOutputData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.fearRollOverValence is None:
        self.fearRollOverValence = 0.
      if self.fearGettingLostValence is None:
        self.fearGettingLostValence = 0.
      if self.tiltOverFeeling is None:
        self.tiltOverFeeling = 0.
      if self.tiltOverHormone is None:
        self.tiltOverHormone = 0.
      if self.rollOverFeeling is None:
        self.rollOverFeeling = 0.
      if self.rollOverHormone is None:
        self.rollOverHormone = 0.
      if self.gpsFeeling is None:
        self.gpsFeeling = 0.
      if self.gpsHormone is None:
        self.gpsHormone = 0.
      if self.dgpsFeeling is None:
        self.dgpsFeeling = 0.
      if self.dgpsHormone is None:
        self.dgpsHormone = 0.
      if self.compassFeeling is None:
        self.compassFeeling = 0.
      if self.compassHormone is None:
        self.compassHormone = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.fearRollOverValence = 0.
      self.fearGettingLostValence = 0.
      self.tiltOverFeeling = 0.
      self.tiltOverHormone = 0.
      self.rollOverFeeling = 0.
      self.rollOverHormone = 0.
      self.gpsFeeling = 0.
      self.gpsHormone = 0.
      self.dgpsFeeling = 0.
      self.dgpsHormone = 0.
      self.compassFeeling = 0.
      self.compassHormone = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_12d.pack(_x.fearRollOverValence, _x.fearGettingLostValence, _x.tiltOverFeeling, _x.tiltOverHormone, _x.rollOverFeeling, _x.rollOverHormone, _x.gpsFeeling, _x.gpsHormone, _x.dgpsFeeling, _x.dgpsHormone, _x.compassFeeling, _x.compassHormone))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 96
      (_x.fearRollOverValence, _x.fearGettingLostValence, _x.tiltOverFeeling, _x.tiltOverHormone, _x.rollOverFeeling, _x.rollOverHormone, _x.gpsFeeling, _x.gpsHormone, _x.dgpsFeeling, _x.dgpsHormone, _x.compassFeeling, _x.compassHormone,) = _struct_12d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_12d.pack(_x.fearRollOverValence, _x.fearGettingLostValence, _x.tiltOverFeeling, _x.tiltOverHormone, _x.rollOverFeeling, _x.rollOverHormone, _x.gpsFeeling, _x.gpsHormone, _x.dgpsFeeling, _x.dgpsHormone, _x.compassFeeling, _x.compassHormone))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 96
      (_x.fearRollOverValence, _x.fearGettingLostValence, _x.tiltOverFeeling, _x.tiltOverHormone, _x.rollOverFeeling, _x.rollOverHormone, _x.gpsFeeling, _x.gpsHormone, _x.dgpsFeeling, _x.dgpsHormone, _x.compassFeeling, _x.compassHormone,) = _struct_12d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_12d = struct.Struct("<12d")

"""autogenerated by genpy from ezls_msgs/LocalizationOutputData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import ezls_msgs.msg
import std_msgs.msg

class LocalizationOutputData(genpy.Message):
  _md5sum = "ae2aff7a0f401775e87367267480188c"
  _type = "ezls_msgs/LocalizationOutputData"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

# Current estimation state.
int32 estimationState

# Estimated position and orientation.
geometry_msgs/PoseStamped pose

# Coordinate system information associated with pose.
ezls_msgs/CoordinateSystemInfo csInfo

# Variance vector ( TODO Should be a covariance matrix. ). Stores component-wise variances ( x, y, z ) of the pose.
geometry_msgs/Vector3 variancePosition

# Variance vector ( TODO Should be a covariance matrix. ). Stores component-wise variances ( pitch, roll, yaw ) of the pose.
geometry_msgs/Vector3 varianceOrientation

# Absolute angles vector for all axises [in rad]. 1st comp. = rot. about x-axis. 2nd comp. = rot. about y-axis. 3rd comp. = rot. about z-axis. mptd of vector rotation.
geometry_msgs/Vector3 angles

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: ezls_msgs/CoordinateSystemInfo
#########################################################################################################################################################
#
# Coordinate system info message.
#
# cs is the coordinate system index
#
#    /**
#     * Undefined coordinate system.
#     */
#    CS_UNDEFINED = -1,
#
#    /**
#     * Geographical coordinate system (World Geodetic System 1984) using latitude and longitude.
#     * Longitude is equivalent to X coordinate.
#     * Latitude is equivalent to Y coordinate.
#     * Altitude is equivalent to Z coordinate.
#     */
#    CS_WGS84 =      1,
#
#    /**
#     * Universal Transverse Mercator coordinate system.
#     * Right is equivalent to X coordinate.
#     * High is equivalent to Y coordinate.
#     * Altitude is equivalent to Z coordinate.
#     */
#    CS_UTM =        2,
#
#    /**
#     * Gauss-Krueger coordinate system.
#     */
#    CS_GK =         3,
#
#    /**
#     * Earth Centred Earth Fixed coordinate system.
#     */
#    CS_ECEF =       4,
#
#
# zone is the zone index. This is used in some coordinate systems like CS_UTM (e.g. "32") in others it can just be ignored.
#
# latitudeBand is the latitude band index. Latitude band characters are encoded as follows: Starting at A=0 the index is incremented with each character.
#
#########################################################################################################################################################

int32 cs
int32 zone
int32 latitudeBand

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['header','estimationState','pose','csInfo','variancePosition','varianceOrientation','angles']
  _slot_types = ['std_msgs/Header','int32','geometry_msgs/PoseStamped','ezls_msgs/CoordinateSystemInfo','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,estimationState,pose,csInfo,variancePosition,varianceOrientation,angles

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LocalizationOutputData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.estimationState is None:
        self.estimationState = 0
      if self.pose is None:
        self.pose = geometry_msgs.msg.PoseStamped()
      if self.csInfo is None:
        self.csInfo = ezls_msgs.msg.CoordinateSystemInfo()
      if self.variancePosition is None:
        self.variancePosition = geometry_msgs.msg.Vector3()
      if self.varianceOrientation is None:
        self.varianceOrientation = geometry_msgs.msg.Vector3()
      if self.angles is None:
        self.angles = geometry_msgs.msg.Vector3()
    else:
      self.header = std_msgs.msg.Header()
      self.estimationState = 0
      self.pose = geometry_msgs.msg.PoseStamped()
      self.csInfo = ezls_msgs.msg.CoordinateSystemInfo()
      self.variancePosition = geometry_msgs.msg.Vector3()
      self.varianceOrientation = geometry_msgs.msg.Vector3()
      self.angles = geometry_msgs.msg.Vector3()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i3I.pack(_x.estimationState, _x.pose.header.seq, _x.pose.header.stamp.secs, _x.pose.header.stamp.nsecs))
      _x = self.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3i9d.pack(_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w, _x.csInfo.cs, _x.csInfo.zone, _x.csInfo.latitudeBand, _x.variancePosition.x, _x.variancePosition.y, _x.variancePosition.z, _x.varianceOrientation.x, _x.varianceOrientation.y, _x.varianceOrientation.z, _x.angles.x, _x.angles.y, _x.angles.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.PoseStamped()
      if self.csInfo is None:
        self.csInfo = ezls_msgs.msg.CoordinateSystemInfo()
      if self.variancePosition is None:
        self.variancePosition = geometry_msgs.msg.Vector3()
      if self.varianceOrientation is None:
        self.varianceOrientation = geometry_msgs.msg.Vector3()
      if self.angles is None:
        self.angles = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.estimationState, _x.pose.header.seq, _x.pose.header.stamp.secs, _x.pose.header.stamp.nsecs,) = _struct_i3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 140
      (_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w, _x.csInfo.cs, _x.csInfo.zone, _x.csInfo.latitudeBand, _x.variancePosition.x, _x.variancePosition.y, _x.variancePosition.z, _x.varianceOrientation.x, _x.varianceOrientation.y, _x.varianceOrientation.z, _x.angles.x, _x.angles.y, _x.angles.z,) = _struct_7d3i9d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i3I.pack(_x.estimationState, _x.pose.header.seq, _x.pose.header.stamp.secs, _x.pose.header.stamp.nsecs))
      _x = self.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3i9d.pack(_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w, _x.csInfo.cs, _x.csInfo.zone, _x.csInfo.latitudeBand, _x.variancePosition.x, _x.variancePosition.y, _x.variancePosition.z, _x.varianceOrientation.x, _x.varianceOrientation.y, _x.varianceOrientation.z, _x.angles.x, _x.angles.y, _x.angles.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.PoseStamped()
      if self.csInfo is None:
        self.csInfo = ezls_msgs.msg.CoordinateSystemInfo()
      if self.variancePosition is None:
        self.variancePosition = geometry_msgs.msg.Vector3()
      if self.varianceOrientation is None:
        self.varianceOrientation = geometry_msgs.msg.Vector3()
      if self.angles is None:
        self.angles = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.estimationState, _x.pose.header.seq, _x.pose.header.stamp.secs, _x.pose.header.stamp.nsecs,) = _struct_i3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 140
      (_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w, _x.csInfo.cs, _x.csInfo.zone, _x.csInfo.latitudeBand, _x.variancePosition.x, _x.variancePosition.y, _x.variancePosition.z, _x.varianceOrientation.x, _x.varianceOrientation.y, _x.varianceOrientation.z, _x.angles.x, _x.angles.y, _x.angles.z,) = _struct_7d3i9d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_7d3i9d = struct.Struct("<7d3i9d")
_struct_i3I = struct.Struct("<i3I")

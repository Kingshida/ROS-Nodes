"""autogenerated by genpy from ezls_msgs/TexturedMesh.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sensor_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class TexturedMesh(genpy.Message):
  _md5sum = "f20d081c245f723df83cb54547c4e2b3"
  _type = "ezls_msgs/TexturedMesh"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

#Triangle point list, first point has id 0
geometry_msgs/Point[] points

#Normal vectors for every point
geometry_msgs/Point[] normal

#RGB color for every point. Range: [0,1] (only used if useTexture=false)
geometry_msgs/Point[] color

#Triangle list, x: id of point1, y: id of point2, z: id of point3
geometry_msgs/Point[] triangleList

#Bool use texture
bool useTexture

#Texture coordinates for every point. Range: [0,1]
geometry_msgs/Point[] textureCoord

#Texture (encoding has to be: sensor_msgs::image_encodings::BGR8)
sensor_msgs/Image texture

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of cameara
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in src/image_encodings.cpp

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

"""
  __slots__ = ['header','points','normal','color','triangleList','useTexture','textureCoord','texture']
  _slot_types = ['std_msgs/Header','geometry_msgs/Point[]','geometry_msgs/Point[]','geometry_msgs/Point[]','geometry_msgs/Point[]','bool','geometry_msgs/Point[]','sensor_msgs/Image']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,points,normal,color,triangleList,useTexture,textureCoord,texture

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TexturedMesh, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.points is None:
        self.points = []
      if self.normal is None:
        self.normal = []
      if self.color is None:
        self.color = []
      if self.triangleList is None:
        self.triangleList = []
      if self.useTexture is None:
        self.useTexture = False
      if self.textureCoord is None:
        self.textureCoord = []
      if self.texture is None:
        self.texture = sensor_msgs.msg.Image()
    else:
      self.header = std_msgs.msg.Header()
      self.points = []
      self.normal = []
      self.color = []
      self.triangleList = []
      self.useTexture = False
      self.textureCoord = []
      self.texture = sensor_msgs.msg.Image()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.normal)
      buff.write(_struct_I.pack(length))
      for val1 in self.normal:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.color)
      buff.write(_struct_I.pack(length))
      for val1 in self.color:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.triangleList)
      buff.write(_struct_I.pack(length))
      for val1 in self.triangleList:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      buff.write(_struct_B.pack(self.useTexture))
      length = len(self.textureCoord)
      buff.write(_struct_I.pack(length))
      for val1 in self.textureCoord:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3I.pack(_x.texture.header.seq, _x.texture.header.stamp.secs, _x.texture.header.stamp.nsecs))
      _x = self.texture.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.texture.height, _x.texture.width))
      _x = self.texture.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.texture.is_bigendian, _x.texture.step))
      _x = self.texture.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.points is None:
        self.points = None
      if self.normal is None:
        self.normal = None
      if self.color is None:
        self.color = None
      if self.triangleList is None:
        self.triangleList = None
      if self.textureCoord is None:
        self.textureCoord = None
      if self.texture is None:
        self.texture = sensor_msgs.msg.Image()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.normal = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.normal.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.color = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.color.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.triangleList = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.triangleList.append(val1)
      start = end
      end += 1
      (self.useTexture,) = _struct_B.unpack(str[start:end])
      self.useTexture = bool(self.useTexture)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.textureCoord = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.textureCoord.append(val1)
      _x = self
      start = end
      end += 12
      (_x.texture.header.seq, _x.texture.header.stamp.secs, _x.texture.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.texture.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.texture.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.texture.height, _x.texture.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.texture.encoding = str[start:end].decode('utf-8')
      else:
        self.texture.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.texture.is_bigendian, _x.texture.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.texture.data = str[start:end].decode('utf-8')
      else:
        self.texture.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.normal)
      buff.write(_struct_I.pack(length))
      for val1 in self.normal:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.color)
      buff.write(_struct_I.pack(length))
      for val1 in self.color:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.triangleList)
      buff.write(_struct_I.pack(length))
      for val1 in self.triangleList:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      buff.write(_struct_B.pack(self.useTexture))
      length = len(self.textureCoord)
      buff.write(_struct_I.pack(length))
      for val1 in self.textureCoord:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3I.pack(_x.texture.header.seq, _x.texture.header.stamp.secs, _x.texture.header.stamp.nsecs))
      _x = self.texture.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.texture.height, _x.texture.width))
      _x = self.texture.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.texture.is_bigendian, _x.texture.step))
      _x = self.texture.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.points is None:
        self.points = None
      if self.normal is None:
        self.normal = None
      if self.color is None:
        self.color = None
      if self.triangleList is None:
        self.triangleList = None
      if self.textureCoord is None:
        self.textureCoord = None
      if self.texture is None:
        self.texture = sensor_msgs.msg.Image()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.normal = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.normal.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.color = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.color.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.triangleList = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.triangleList.append(val1)
      start = end
      end += 1
      (self.useTexture,) = _struct_B.unpack(str[start:end])
      self.useTexture = bool(self.useTexture)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.textureCoord = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.textureCoord.append(val1)
      _x = self
      start = end
      end += 12
      (_x.texture.header.seq, _x.texture.header.stamp.secs, _x.texture.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.texture.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.texture.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.texture.height, _x.texture.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.texture.encoding = str[start:end].decode('utf-8')
      else:
        self.texture.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.texture.is_bigendian, _x.texture.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.texture.data = str[start:end].decode('utf-8')
      else:
        self.texture.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_B = struct.Struct("<B")
_struct_BI = struct.Struct("<BI")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")

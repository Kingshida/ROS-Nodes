"""autogenerated by genpy from ezls_msgs/CoordinateSystemInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CoordinateSystemInfo(genpy.Message):
  _md5sum = "584a7f81efd19ee7e3bf3b1ad66fbcdd"
  _type = "ezls_msgs/CoordinateSystemInfo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#########################################################################################################################################################
#
# Coordinate system info message.
#
# cs is the coordinate system index
#
#    /**
#     * Undefined coordinate system.
#     */
#    CS_UNDEFINED = -1,
#
#    /**
#     * Geographical coordinate system (World Geodetic System 1984) using latitude and longitude.
#     * Longitude is equivalent to X coordinate.
#     * Latitude is equivalent to Y coordinate.
#     * Altitude is equivalent to Z coordinate.
#     */
#    CS_WGS84 =      1,
#
#    /**
#     * Universal Transverse Mercator coordinate system.
#     * Right is equivalent to X coordinate.
#     * High is equivalent to Y coordinate.
#     * Altitude is equivalent to Z coordinate.
#     */
#    CS_UTM =        2,
#
#    /**
#     * Gauss-Krueger coordinate system.
#     */
#    CS_GK =         3,
#
#    /**
#     * Earth Centred Earth Fixed coordinate system.
#     */
#    CS_ECEF =       4,
#
#
# zone is the zone index. This is used in some coordinate systems like CS_UTM (e.g. "32") in others it can just be ignored.
#
# latitudeBand is the latitude band index. Latitude band characters are encoded as follows: Starting at A=0 the index is incremented with each character.
#
#########################################################################################################################################################

int32 cs
int32 zone
int32 latitudeBand

"""
  __slots__ = ['cs','zone','latitudeBand']
  _slot_types = ['int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cs,zone,latitudeBand

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CoordinateSystemInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.cs is None:
        self.cs = 0
      if self.zone is None:
        self.zone = 0
      if self.latitudeBand is None:
        self.latitudeBand = 0
    else:
      self.cs = 0
      self.zone = 0
      self.latitudeBand = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3i.pack(_x.cs, _x.zone, _x.latitudeBand))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.cs, _x.zone, _x.latitudeBand,) = _struct_3i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3i.pack(_x.cs, _x.zone, _x.latitudeBand))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.cs, _x.zone, _x.latitudeBand,) = _struct_3i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3i = struct.Struct("<3i")

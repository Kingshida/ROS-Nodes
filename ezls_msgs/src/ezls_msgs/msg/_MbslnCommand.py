"""autogenerated by genpy from ezls_msgs/MbslnCommand.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class MbslnCommand(genpy.Message):
  _md5sum = "af122bc7225cac950dd8d7715a0b0760"
  _type = "ezls_msgs/MbslnCommand"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 timestamp
int32 command

# Initialization stuff
# --------------------
# Number of particles in the initial particle set
int32 numberOfParticles
# The position to initialize the particle set
geometry_msgs/Point initCoordinate
# Descriptor for the size of the area to use for initialization
float64 initRadius
# Flags if the current dgps position fix is used as the initCoordinate. In this case initCoordinate (see above) is meaningless
bool initAtDgps


# Navigation stuff
# -----------------
# The coordinate of departure for a route-request
geometry_msgs/Point navigationDeparture
# The destination-coordinate for a route-request
geometry_msgs/Point navigationDestination
# Descriptor for the density of the waypoints. The lower the denser
float64 waypointsDelta


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['timestamp','command','numberOfParticles','initCoordinate','initRadius','initAtDgps','navigationDeparture','navigationDestination','waypointsDelta']
  _slot_types = ['float64','int32','int32','geometry_msgs/Point','float64','bool','geometry_msgs/Point','geometry_msgs/Point','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,command,numberOfParticles,initCoordinate,initRadius,initAtDgps,navigationDeparture,navigationDestination,waypointsDelta

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MbslnCommand, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0.
      if self.command is None:
        self.command = 0
      if self.numberOfParticles is None:
        self.numberOfParticles = 0
      if self.initCoordinate is None:
        self.initCoordinate = geometry_msgs.msg.Point()
      if self.initRadius is None:
        self.initRadius = 0.
      if self.initAtDgps is None:
        self.initAtDgps = False
      if self.navigationDeparture is None:
        self.navigationDeparture = geometry_msgs.msg.Point()
      if self.navigationDestination is None:
        self.navigationDestination = geometry_msgs.msg.Point()
      if self.waypointsDelta is None:
        self.waypointsDelta = 0.
    else:
      self.timestamp = 0.
      self.command = 0
      self.numberOfParticles = 0
      self.initCoordinate = geometry_msgs.msg.Point()
      self.initRadius = 0.
      self.initAtDgps = False
      self.navigationDeparture = geometry_msgs.msg.Point()
      self.navigationDestination = geometry_msgs.msg.Point()
      self.waypointsDelta = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_d2i4dB7d.pack(_x.timestamp, _x.command, _x.numberOfParticles, _x.initCoordinate.x, _x.initCoordinate.y, _x.initCoordinate.z, _x.initRadius, _x.initAtDgps, _x.navigationDeparture.x, _x.navigationDeparture.y, _x.navigationDeparture.z, _x.navigationDestination.x, _x.navigationDestination.y, _x.navigationDestination.z, _x.waypointsDelta))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.initCoordinate is None:
        self.initCoordinate = geometry_msgs.msg.Point()
      if self.navigationDeparture is None:
        self.navigationDeparture = geometry_msgs.msg.Point()
      if self.navigationDestination is None:
        self.navigationDestination = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 105
      (_x.timestamp, _x.command, _x.numberOfParticles, _x.initCoordinate.x, _x.initCoordinate.y, _x.initCoordinate.z, _x.initRadius, _x.initAtDgps, _x.navigationDeparture.x, _x.navigationDeparture.y, _x.navigationDeparture.z, _x.navigationDestination.x, _x.navigationDestination.y, _x.navigationDestination.z, _x.waypointsDelta,) = _struct_d2i4dB7d.unpack(str[start:end])
      self.initAtDgps = bool(self.initAtDgps)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_d2i4dB7d.pack(_x.timestamp, _x.command, _x.numberOfParticles, _x.initCoordinate.x, _x.initCoordinate.y, _x.initCoordinate.z, _x.initRadius, _x.initAtDgps, _x.navigationDeparture.x, _x.navigationDeparture.y, _x.navigationDeparture.z, _x.navigationDestination.x, _x.navigationDestination.y, _x.navigationDestination.z, _x.waypointsDelta))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.initCoordinate is None:
        self.initCoordinate = geometry_msgs.msg.Point()
      if self.navigationDeparture is None:
        self.navigationDeparture = geometry_msgs.msg.Point()
      if self.navigationDestination is None:
        self.navigationDestination = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 105
      (_x.timestamp, _x.command, _x.numberOfParticles, _x.initCoordinate.x, _x.initCoordinate.y, _x.initCoordinate.z, _x.initRadius, _x.initAtDgps, _x.navigationDeparture.x, _x.navigationDeparture.y, _x.navigationDeparture.z, _x.navigationDestination.x, _x.navigationDestination.y, _x.navigationDestination.z, _x.waypointsDelta,) = _struct_d2i4dB7d.unpack(str[start:end])
      self.initAtDgps = bool(self.initAtDgps)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d2i4dB7d = struct.Struct("<d2i4dB7d")

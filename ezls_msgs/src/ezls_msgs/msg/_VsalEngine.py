"""autogenerated by genpy from ezls_msgs/VsalEngine.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VsalEngine(genpy.Message):
  _md5sum = "28855f4e9a71443c021668225cd3119b"
  _type = "ezls_msgs/VsalEngine"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8   state
float64 uptime
float64 referenceGas
uint8   referenceGear
float64 referenceBrakingStrength
uint8   starterTime
uint8   ventilation
uint8   horn
uint8   light
uint8   rcQuality
uint8   securityCircuit
float64 rcGasLimit

"""
  __slots__ = ['state','uptime','referenceGas','referenceGear','referenceBrakingStrength','starterTime','ventilation','horn','light','rcQuality','securityCircuit','rcGasLimit']
  _slot_types = ['uint8','float64','float64','uint8','float64','uint8','uint8','uint8','uint8','uint8','uint8','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state,uptime,referenceGas,referenceGear,referenceBrakingStrength,starterTime,ventilation,horn,light,rcQuality,securityCircuit,rcGasLimit

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VsalEngine, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = 0
      if self.uptime is None:
        self.uptime = 0.
      if self.referenceGas is None:
        self.referenceGas = 0.
      if self.referenceGear is None:
        self.referenceGear = 0
      if self.referenceBrakingStrength is None:
        self.referenceBrakingStrength = 0.
      if self.starterTime is None:
        self.starterTime = 0
      if self.ventilation is None:
        self.ventilation = 0
      if self.horn is None:
        self.horn = 0
      if self.light is None:
        self.light = 0
      if self.rcQuality is None:
        self.rcQuality = 0
      if self.securityCircuit is None:
        self.securityCircuit = 0
      if self.rcGasLimit is None:
        self.rcGasLimit = 0.
    else:
      self.state = 0
      self.uptime = 0.
      self.referenceGas = 0.
      self.referenceGear = 0
      self.referenceBrakingStrength = 0.
      self.starterTime = 0
      self.ventilation = 0
      self.horn = 0
      self.light = 0
      self.rcQuality = 0
      self.securityCircuit = 0
      self.rcGasLimit = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B2dBd6Bd.pack(_x.state, _x.uptime, _x.referenceGas, _x.referenceGear, _x.referenceBrakingStrength, _x.starterTime, _x.ventilation, _x.horn, _x.light, _x.rcQuality, _x.securityCircuit, _x.rcGasLimit))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.state, _x.uptime, _x.referenceGas, _x.referenceGear, _x.referenceBrakingStrength, _x.starterTime, _x.ventilation, _x.horn, _x.light, _x.rcQuality, _x.securityCircuit, _x.rcGasLimit,) = _struct_B2dBd6Bd.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B2dBd6Bd.pack(_x.state, _x.uptime, _x.referenceGas, _x.referenceGear, _x.referenceBrakingStrength, _x.starterTime, _x.ventilation, _x.horn, _x.light, _x.rcQuality, _x.securityCircuit, _x.rcGasLimit))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.state, _x.uptime, _x.referenceGas, _x.referenceGear, _x.referenceBrakingStrength, _x.starterTime, _x.ventilation, _x.horn, _x.light, _x.rcQuality, _x.securityCircuit, _x.rcGasLimit,) = _struct_B2dBd6Bd.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B2dBd6Bd = struct.Struct("<B2dBd6Bd")

"""autogenerated by genpy from ezls_msgs/VsalTacho.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VsalTacho(genpy.Message):
  _md5sum = "7a17aec7018e04d272b77b4494965b1b"
  _type = "ezls_msgs/VsalTacho"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8   state
float64 uptime
float64 totalDistance
float64 speed
int8    direction

"""
  __slots__ = ['state','uptime','totalDistance','speed','direction']
  _slot_types = ['uint8','float64','float64','float64','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state,uptime,totalDistance,speed,direction

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VsalTacho, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = 0
      if self.uptime is None:
        self.uptime = 0.
      if self.totalDistance is None:
        self.totalDistance = 0.
      if self.speed is None:
        self.speed = 0.
      if self.direction is None:
        self.direction = 0
    else:
      self.state = 0
      self.uptime = 0.
      self.totalDistance = 0.
      self.speed = 0.
      self.direction = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B3db.pack(_x.state, _x.uptime, _x.totalDistance, _x.speed, _x.direction))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.state, _x.uptime, _x.totalDistance, _x.speed, _x.direction,) = _struct_B3db.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B3db.pack(_x.state, _x.uptime, _x.totalDistance, _x.speed, _x.direction))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.state, _x.uptime, _x.totalDistance, _x.speed, _x.direction,) = _struct_B3db.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B3db = struct.Struct("<B3db")

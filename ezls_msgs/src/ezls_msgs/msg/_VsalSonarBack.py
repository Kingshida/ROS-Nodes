"""autogenerated by genpy from ezls_msgs/VsalSonarBack.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VsalSonarBack(genpy.Message):
  _md5sum = "f0cd4c9cd2af6706c75e4853291df67f"
  _type = "ezls_msgs/VsalSonarBack"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8   state
float64 uptime
uint8   enabledGroups
float64 sonar0
float64 sonar1
float64 sonar2
float64 sonar3
float64 sonar4
float64 sonar5
float64 sonar6
float64 sonar7
uint8   group0Init
uint8   group1Init
uint8   group2Init
uint8   group3Init
uint8   group4Init
uint8   group5Init
uint8   group6Init
uint8   group7Init

"""
  __slots__ = ['state','uptime','enabledGroups','sonar0','sonar1','sonar2','sonar3','sonar4','sonar5','sonar6','sonar7','group0Init','group1Init','group2Init','group3Init','group4Init','group5Init','group6Init','group7Init']
  _slot_types = ['uint8','float64','uint8','float64','float64','float64','float64','float64','float64','float64','float64','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state,uptime,enabledGroups,sonar0,sonar1,sonar2,sonar3,sonar4,sonar5,sonar6,sonar7,group0Init,group1Init,group2Init,group3Init,group4Init,group5Init,group6Init,group7Init

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VsalSonarBack, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = 0
      if self.uptime is None:
        self.uptime = 0.
      if self.enabledGroups is None:
        self.enabledGroups = 0
      if self.sonar0 is None:
        self.sonar0 = 0.
      if self.sonar1 is None:
        self.sonar1 = 0.
      if self.sonar2 is None:
        self.sonar2 = 0.
      if self.sonar3 is None:
        self.sonar3 = 0.
      if self.sonar4 is None:
        self.sonar4 = 0.
      if self.sonar5 is None:
        self.sonar5 = 0.
      if self.sonar6 is None:
        self.sonar6 = 0.
      if self.sonar7 is None:
        self.sonar7 = 0.
      if self.group0Init is None:
        self.group0Init = 0
      if self.group1Init is None:
        self.group1Init = 0
      if self.group2Init is None:
        self.group2Init = 0
      if self.group3Init is None:
        self.group3Init = 0
      if self.group4Init is None:
        self.group4Init = 0
      if self.group5Init is None:
        self.group5Init = 0
      if self.group6Init is None:
        self.group6Init = 0
      if self.group7Init is None:
        self.group7Init = 0
    else:
      self.state = 0
      self.uptime = 0.
      self.enabledGroups = 0
      self.sonar0 = 0.
      self.sonar1 = 0.
      self.sonar2 = 0.
      self.sonar3 = 0.
      self.sonar4 = 0.
      self.sonar5 = 0.
      self.sonar6 = 0.
      self.sonar7 = 0.
      self.group0Init = 0
      self.group1Init = 0
      self.group2Init = 0
      self.group3Init = 0
      self.group4Init = 0
      self.group5Init = 0
      self.group6Init = 0
      self.group7Init = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_BdB8d8B.pack(_x.state, _x.uptime, _x.enabledGroups, _x.sonar0, _x.sonar1, _x.sonar2, _x.sonar3, _x.sonar4, _x.sonar5, _x.sonar6, _x.sonar7, _x.group0Init, _x.group1Init, _x.group2Init, _x.group3Init, _x.group4Init, _x.group5Init, _x.group6Init, _x.group7Init))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 82
      (_x.state, _x.uptime, _x.enabledGroups, _x.sonar0, _x.sonar1, _x.sonar2, _x.sonar3, _x.sonar4, _x.sonar5, _x.sonar6, _x.sonar7, _x.group0Init, _x.group1Init, _x.group2Init, _x.group3Init, _x.group4Init, _x.group5Init, _x.group6Init, _x.group7Init,) = _struct_BdB8d8B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_BdB8d8B.pack(_x.state, _x.uptime, _x.enabledGroups, _x.sonar0, _x.sonar1, _x.sonar2, _x.sonar3, _x.sonar4, _x.sonar5, _x.sonar6, _x.sonar7, _x.group0Init, _x.group1Init, _x.group2Init, _x.group3Init, _x.group4Init, _x.group5Init, _x.group6Init, _x.group7Init))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 82
      (_x.state, _x.uptime, _x.enabledGroups, _x.sonar0, _x.sonar1, _x.sonar2, _x.sonar3, _x.sonar4, _x.sonar5, _x.sonar6, _x.sonar7, _x.group0Init, _x.group1Init, _x.group2Init, _x.group3Init, _x.group4Init, _x.group5Init, _x.group6Init, _x.group7Init,) = _struct_BdB8d8B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_BdB8d8B = struct.Struct("<BdB8d8B")

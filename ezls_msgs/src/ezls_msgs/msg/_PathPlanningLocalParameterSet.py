"""autogenerated by genpy from ezls_msgs/PathPlanningLocalParameterSet.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class PathPlanningLocalParameterSet(genpy.Message):
  _md5sum = "eef2100c887d7083a372c0de7be765bd"
  _type = "ezls_msgs/PathPlanningLocalParameterSet"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

uint32 numLoD

geometry_msgs/Vector3 resolution
geometry_msgs/Vector3 minimalBounds
geometry_msgs/Vector3 maximalBounds
geometry_msgs/Vector3 vehicleSize

bool buildObstacleMap
float64 maxInterCellHeightDifference

bool interpolate
float64 interpolationDistance

bool clearCircle
float64 clearCircleRadius

bool erodeUnknownArea
bool erodeMapBorder
float64 erodeUnknownAreaDistance

bool morphOpObstacles
float64 morphOpObstaclesKernelSize

bool findNearObstaclesByHeight
float64 maxNearObstacleHeight
float64 minNearObstacleCircleRadius
float64 maxNearObstacleCircleRadius

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['header','numLoD','resolution','minimalBounds','maximalBounds','vehicleSize','buildObstacleMap','maxInterCellHeightDifference','interpolate','interpolationDistance','clearCircle','clearCircleRadius','erodeUnknownArea','erodeMapBorder','erodeUnknownAreaDistance','morphOpObstacles','morphOpObstaclesKernelSize','findNearObstaclesByHeight','maxNearObstacleHeight','minNearObstacleCircleRadius','maxNearObstacleCircleRadius']
  _slot_types = ['std_msgs/Header','uint32','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','bool','float64','bool','float64','bool','float64','bool','bool','float64','bool','float64','bool','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,numLoD,resolution,minimalBounds,maximalBounds,vehicleSize,buildObstacleMap,maxInterCellHeightDifference,interpolate,interpolationDistance,clearCircle,clearCircleRadius,erodeUnknownArea,erodeMapBorder,erodeUnknownAreaDistance,morphOpObstacles,morphOpObstaclesKernelSize,findNearObstaclesByHeight,maxNearObstacleHeight,minNearObstacleCircleRadius,maxNearObstacleCircleRadius

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PathPlanningLocalParameterSet, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.numLoD is None:
        self.numLoD = 0
      if self.resolution is None:
        self.resolution = geometry_msgs.msg.Vector3()
      if self.minimalBounds is None:
        self.minimalBounds = geometry_msgs.msg.Vector3()
      if self.maximalBounds is None:
        self.maximalBounds = geometry_msgs.msg.Vector3()
      if self.vehicleSize is None:
        self.vehicleSize = geometry_msgs.msg.Vector3()
      if self.buildObstacleMap is None:
        self.buildObstacleMap = False
      if self.maxInterCellHeightDifference is None:
        self.maxInterCellHeightDifference = 0.
      if self.interpolate is None:
        self.interpolate = False
      if self.interpolationDistance is None:
        self.interpolationDistance = 0.
      if self.clearCircle is None:
        self.clearCircle = False
      if self.clearCircleRadius is None:
        self.clearCircleRadius = 0.
      if self.erodeUnknownArea is None:
        self.erodeUnknownArea = False
      if self.erodeMapBorder is None:
        self.erodeMapBorder = False
      if self.erodeUnknownAreaDistance is None:
        self.erodeUnknownAreaDistance = 0.
      if self.morphOpObstacles is None:
        self.morphOpObstacles = False
      if self.morphOpObstaclesKernelSize is None:
        self.morphOpObstaclesKernelSize = 0.
      if self.findNearObstaclesByHeight is None:
        self.findNearObstaclesByHeight = False
      if self.maxNearObstacleHeight is None:
        self.maxNearObstacleHeight = 0.
      if self.minNearObstacleCircleRadius is None:
        self.minNearObstacleCircleRadius = 0.
      if self.maxNearObstacleCircleRadius is None:
        self.maxNearObstacleCircleRadius = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.numLoD = 0
      self.resolution = geometry_msgs.msg.Vector3()
      self.minimalBounds = geometry_msgs.msg.Vector3()
      self.maximalBounds = geometry_msgs.msg.Vector3()
      self.vehicleSize = geometry_msgs.msg.Vector3()
      self.buildObstacleMap = False
      self.maxInterCellHeightDifference = 0.
      self.interpolate = False
      self.interpolationDistance = 0.
      self.clearCircle = False
      self.clearCircleRadius = 0.
      self.erodeUnknownArea = False
      self.erodeMapBorder = False
      self.erodeUnknownAreaDistance = 0.
      self.morphOpObstacles = False
      self.morphOpObstaclesKernelSize = 0.
      self.findNearObstaclesByHeight = False
      self.maxNearObstacleHeight = 0.
      self.minNearObstacleCircleRadius = 0.
      self.maxNearObstacleCircleRadius = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_I12dBdBdBd2BdBdB3d.pack(_x.numLoD, _x.resolution.x, _x.resolution.y, _x.resolution.z, _x.minimalBounds.x, _x.minimalBounds.y, _x.minimalBounds.z, _x.maximalBounds.x, _x.maximalBounds.y, _x.maximalBounds.z, _x.vehicleSize.x, _x.vehicleSize.y, _x.vehicleSize.z, _x.buildObstacleMap, _x.maxInterCellHeightDifference, _x.interpolate, _x.interpolationDistance, _x.clearCircle, _x.clearCircleRadius, _x.erodeUnknownArea, _x.erodeMapBorder, _x.erodeUnknownAreaDistance, _x.morphOpObstacles, _x.morphOpObstaclesKernelSize, _x.findNearObstaclesByHeight, _x.maxNearObstacleHeight, _x.minNearObstacleCircleRadius, _x.maxNearObstacleCircleRadius))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.resolution is None:
        self.resolution = geometry_msgs.msg.Vector3()
      if self.minimalBounds is None:
        self.minimalBounds = geometry_msgs.msg.Vector3()
      if self.maximalBounds is None:
        self.maximalBounds = geometry_msgs.msg.Vector3()
      if self.vehicleSize is None:
        self.vehicleSize = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 171
      (_x.numLoD, _x.resolution.x, _x.resolution.y, _x.resolution.z, _x.minimalBounds.x, _x.minimalBounds.y, _x.minimalBounds.z, _x.maximalBounds.x, _x.maximalBounds.y, _x.maximalBounds.z, _x.vehicleSize.x, _x.vehicleSize.y, _x.vehicleSize.z, _x.buildObstacleMap, _x.maxInterCellHeightDifference, _x.interpolate, _x.interpolationDistance, _x.clearCircle, _x.clearCircleRadius, _x.erodeUnknownArea, _x.erodeMapBorder, _x.erodeUnknownAreaDistance, _x.morphOpObstacles, _x.morphOpObstaclesKernelSize, _x.findNearObstaclesByHeight, _x.maxNearObstacleHeight, _x.minNearObstacleCircleRadius, _x.maxNearObstacleCircleRadius,) = _struct_I12dBdBdBd2BdBdB3d.unpack(str[start:end])
      self.buildObstacleMap = bool(self.buildObstacleMap)
      self.interpolate = bool(self.interpolate)
      self.clearCircle = bool(self.clearCircle)
      self.erodeUnknownArea = bool(self.erodeUnknownArea)
      self.erodeMapBorder = bool(self.erodeMapBorder)
      self.morphOpObstacles = bool(self.morphOpObstacles)
      self.findNearObstaclesByHeight = bool(self.findNearObstaclesByHeight)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_I12dBdBdBd2BdBdB3d.pack(_x.numLoD, _x.resolution.x, _x.resolution.y, _x.resolution.z, _x.minimalBounds.x, _x.minimalBounds.y, _x.minimalBounds.z, _x.maximalBounds.x, _x.maximalBounds.y, _x.maximalBounds.z, _x.vehicleSize.x, _x.vehicleSize.y, _x.vehicleSize.z, _x.buildObstacleMap, _x.maxInterCellHeightDifference, _x.interpolate, _x.interpolationDistance, _x.clearCircle, _x.clearCircleRadius, _x.erodeUnknownArea, _x.erodeMapBorder, _x.erodeUnknownAreaDistance, _x.morphOpObstacles, _x.morphOpObstaclesKernelSize, _x.findNearObstaclesByHeight, _x.maxNearObstacleHeight, _x.minNearObstacleCircleRadius, _x.maxNearObstacleCircleRadius))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.resolution is None:
        self.resolution = geometry_msgs.msg.Vector3()
      if self.minimalBounds is None:
        self.minimalBounds = geometry_msgs.msg.Vector3()
      if self.maximalBounds is None:
        self.maximalBounds = geometry_msgs.msg.Vector3()
      if self.vehicleSize is None:
        self.vehicleSize = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 171
      (_x.numLoD, _x.resolution.x, _x.resolution.y, _x.resolution.z, _x.minimalBounds.x, _x.minimalBounds.y, _x.minimalBounds.z, _x.maximalBounds.x, _x.maximalBounds.y, _x.maximalBounds.z, _x.vehicleSize.x, _x.vehicleSize.y, _x.vehicleSize.z, _x.buildObstacleMap, _x.maxInterCellHeightDifference, _x.interpolate, _x.interpolationDistance, _x.clearCircle, _x.clearCircleRadius, _x.erodeUnknownArea, _x.erodeMapBorder, _x.erodeUnknownAreaDistance, _x.morphOpObstacles, _x.morphOpObstaclesKernelSize, _x.findNearObstaclesByHeight, _x.maxNearObstacleHeight, _x.minNearObstacleCircleRadius, _x.maxNearObstacleCircleRadius,) = _struct_I12dBdBdBd2BdBdB3d.unpack(str[start:end])
      self.buildObstacleMap = bool(self.buildObstacleMap)
      self.interpolate = bool(self.interpolate)
      self.clearCircle = bool(self.clearCircle)
      self.erodeUnknownArea = bool(self.erodeUnknownArea)
      self.erodeMapBorder = bool(self.erodeMapBorder)
      self.morphOpObstacles = bool(self.morphOpObstacles)
      self.findNearObstaclesByHeight = bool(self.findNearObstaclesByHeight)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_I12dBdBdBd2BdBdB3d = struct.Struct("<I12dBdBdBd2BdBdB3d")

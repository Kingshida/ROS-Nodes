"""autogenerated by genpy from ezls_msgs/PathPlanningLocalPath.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ezls_msgs.msg

class PathPlanningLocalPath(genpy.Message):
  _md5sum = "b08cb87de7462209e8c3d0602bc53697"
  _type = "ezls_msgs/PathPlanningLocalPath"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """SimpleNode[] nodePath
uint32 pathSize
bool straightForwardDriving
float64 referenceSpeed

================================================================================
MSG: ezls_msgs/SimpleNode
uint32 id
float64[] state
float64[] input
float64 time

"""
  __slots__ = ['nodePath','pathSize','straightForwardDriving','referenceSpeed']
  _slot_types = ['ezls_msgs/SimpleNode[]','uint32','bool','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       nodePath,pathSize,straightForwardDriving,referenceSpeed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PathPlanningLocalPath, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.nodePath is None:
        self.nodePath = []
      if self.pathSize is None:
        self.pathSize = 0
      if self.straightForwardDriving is None:
        self.straightForwardDriving = False
      if self.referenceSpeed is None:
        self.referenceSpeed = 0.
    else:
      self.nodePath = []
      self.pathSize = 0
      self.straightForwardDriving = False
      self.referenceSpeed = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.nodePath)
      buff.write(_struct_I.pack(length))
      for val1 in self.nodePath:
        buff.write(_struct_I.pack(val1.id))
        length = len(val1.state)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.state))
        length = len(val1.input)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.input))
        buff.write(_struct_d.pack(val1.time))
      _x = self
      buff.write(_struct_IBd.pack(_x.pathSize, _x.straightForwardDriving, _x.referenceSpeed))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.nodePath is None:
        self.nodePath = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.nodePath = []
      for i in range(0, length):
        val1 = ezls_msgs.msg.SimpleNode()
        start = end
        end += 4
        (val1.id,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.state = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.input = struct.unpack(pattern, str[start:end])
        start = end
        end += 8
        (val1.time,) = _struct_d.unpack(str[start:end])
        self.nodePath.append(val1)
      _x = self
      start = end
      end += 13
      (_x.pathSize, _x.straightForwardDriving, _x.referenceSpeed,) = _struct_IBd.unpack(str[start:end])
      self.straightForwardDriving = bool(self.straightForwardDriving)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.nodePath)
      buff.write(_struct_I.pack(length))
      for val1 in self.nodePath:
        buff.write(_struct_I.pack(val1.id))
        length = len(val1.state)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.state.tostring())
        length = len(val1.input)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.input.tostring())
        buff.write(_struct_d.pack(val1.time))
      _x = self
      buff.write(_struct_IBd.pack(_x.pathSize, _x.straightForwardDriving, _x.referenceSpeed))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.nodePath is None:
        self.nodePath = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.nodePath = []
      for i in range(0, length):
        val1 = ezls_msgs.msg.SimpleNode()
        start = end
        end += 4
        (val1.id,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.state = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.input = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 8
        (val1.time,) = _struct_d.unpack(str[start:end])
        self.nodePath.append(val1)
      _x = self
      start = end
      end += 13
      (_x.pathSize, _x.straightForwardDriving, _x.referenceSpeed,) = _struct_IBd.unpack(str[start:end])
      self.straightForwardDriving = bool(self.straightForwardDriving)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_IBd = struct.Struct("<IBd")
_struct_d = struct.Struct("<d")

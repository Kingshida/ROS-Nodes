"""autogenerated by genpy from ezls_msgs/ADIS16201RawData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ADIS16201RawData(genpy.Message):
  _md5sum = "1bc7d8235a1463b60b6d687f97c7436d"
  _type = "ezls_msgs/ADIS16201RawData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 vcc
int32 acc_x
int32 acc_y
int32 temp
int32 roll
int32 pitch
int32 state

"""
  __slots__ = ['vcc','acc_x','acc_y','temp','roll','pitch','state']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vcc,acc_x,acc_y,temp,roll,pitch,state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ADIS16201RawData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.vcc is None:
        self.vcc = 0
      if self.acc_x is None:
        self.acc_x = 0
      if self.acc_y is None:
        self.acc_y = 0
      if self.temp is None:
        self.temp = 0
      if self.roll is None:
        self.roll = 0
      if self.pitch is None:
        self.pitch = 0
      if self.state is None:
        self.state = 0
    else:
      self.vcc = 0
      self.acc_x = 0
      self.acc_y = 0
      self.temp = 0
      self.roll = 0
      self.pitch = 0
      self.state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_7i.pack(_x.vcc, _x.acc_x, _x.acc_y, _x.temp, _x.roll, _x.pitch, _x.state))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.vcc, _x.acc_x, _x.acc_y, _x.temp, _x.roll, _x.pitch, _x.state,) = _struct_7i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_7i.pack(_x.vcc, _x.acc_x, _x.acc_y, _x.temp, _x.roll, _x.pitch, _x.state))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.vcc, _x.acc_x, _x.acc_y, _x.temp, _x.roll, _x.pitch, _x.state,) = _struct_7i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7i = struct.Struct("<7i")

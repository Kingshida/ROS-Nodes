"""autogenerated by genpy from ezls_msgs/ReflexesOutputData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ReflexesOutputData(genpy.Message):
  _md5sum = "f2ac00ecd3e7f7c8950fd262a7ceb1cd"
  _type = "ezls_msgs/ReflexesOutputData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 recommendedHeading
float64 recommendedSpeed
float64 referenceHeading
float64 referenceSpeed
int8 referenceDirection

"""
  __slots__ = ['recommendedHeading','recommendedSpeed','referenceHeading','referenceSpeed','referenceDirection']
  _slot_types = ['float64','float64','float64','float64','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       recommendedHeading,recommendedSpeed,referenceHeading,referenceSpeed,referenceDirection

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ReflexesOutputData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.recommendedHeading is None:
        self.recommendedHeading = 0.
      if self.recommendedSpeed is None:
        self.recommendedSpeed = 0.
      if self.referenceHeading is None:
        self.referenceHeading = 0.
      if self.referenceSpeed is None:
        self.referenceSpeed = 0.
      if self.referenceDirection is None:
        self.referenceDirection = 0
    else:
      self.recommendedHeading = 0.
      self.recommendedSpeed = 0.
      self.referenceHeading = 0.
      self.referenceSpeed = 0.
      self.referenceDirection = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4db.pack(_x.recommendedHeading, _x.recommendedSpeed, _x.referenceHeading, _x.referenceSpeed, _x.referenceDirection))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.recommendedHeading, _x.recommendedSpeed, _x.referenceHeading, _x.referenceSpeed, _x.referenceDirection,) = _struct_4db.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4db.pack(_x.recommendedHeading, _x.recommendedSpeed, _x.referenceHeading, _x.referenceSpeed, _x.referenceDirection))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.recommendedHeading, _x.recommendedSpeed, _x.referenceHeading, _x.referenceSpeed, _x.referenceDirection,) = _struct_4db.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4db = struct.Struct("<4db")

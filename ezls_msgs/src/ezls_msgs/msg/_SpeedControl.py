"""autogenerated by genpy from ezls_msgs/SpeedControl.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class SpeedControl(genpy.Message):
  _md5sum = "0ba17e8c178521984641d28c20f426b2"
  _type = "ezls_msgs/SpeedControl"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

# dState of the gascontroller
float64 GasPid_dState

# iState of the gascontroller
float64 GasPid_iState

# timestamp of the previous update of the gascontroller [s]
float64 GasPid_tPrevious

# timestamp of the most recent update of the gascontroller [s]
float64 GasPid_tCurrent

# pTerm of the gascontroller
float64 GasPid_pTerm

# iTerm of the gascontroller
float64 GasPid_iTerm

# dTerm of the gascontroller
float64 GasPid_dTerm

# The result of the gascontroller 
float64 GasPid_result

# The reference value of the gascontroller [m/s]
float64 GasPid_referenceValue

# The current (measured) value of the controlled variable of the gascontroller [m/s]
float64 GasPid_currentValue


# dState of the brakecontroller
float64 BrakePid_dState

# iState of the brakecontroller
float64 BrakePid_iState

# timestamp of the previous update of the brakecontroller [s]
float64 BrakePid_tPrevious

# timestamp of the most recent update of the brakecontroller [s]
float64 BrakePid_tCurrent

# pTerm of the brakecontroller
float64 BrakePid_pTerm

# iTerm of the brakecontroller
float64 BrakePid_iTerm

# dTerm of the brakecontroller
float64 BrakePid_dTerm

# The result of the brakecontroller 
float64 BrakePid_result

# The reference value of the brakecontroller [m/s]
float64 BrakePid_referenceValue

# The current (measured) value of the controlled variable of the brakecontroller [m/s]
float64 BrakePid_currentValue


# The feedforward offset of the steering adaptation of the gascontroller
float64 GasAdaptation_ffSteering

# The currently activated controller: true=gasCtrl; false=brakeController
bool activeController

# The final result of the gascontroller
int32 finalGas

# The final result of the brakecontroller
int32 finalBrake


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','GasPid_dState','GasPid_iState','GasPid_tPrevious','GasPid_tCurrent','GasPid_pTerm','GasPid_iTerm','GasPid_dTerm','GasPid_result','GasPid_referenceValue','GasPid_currentValue','BrakePid_dState','BrakePid_iState','BrakePid_tPrevious','BrakePid_tCurrent','BrakePid_pTerm','BrakePid_iTerm','BrakePid_dTerm','BrakePid_result','BrakePid_referenceValue','BrakePid_currentValue','GasAdaptation_ffSteering','activeController','finalGas','finalBrake']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','bool','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,GasPid_dState,GasPid_iState,GasPid_tPrevious,GasPid_tCurrent,GasPid_pTerm,GasPid_iTerm,GasPid_dTerm,GasPid_result,GasPid_referenceValue,GasPid_currentValue,BrakePid_dState,BrakePid_iState,BrakePid_tPrevious,BrakePid_tCurrent,BrakePid_pTerm,BrakePid_iTerm,BrakePid_dTerm,BrakePid_result,BrakePid_referenceValue,BrakePid_currentValue,GasAdaptation_ffSteering,activeController,finalGas,finalBrake

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SpeedControl, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.GasPid_dState is None:
        self.GasPid_dState = 0.
      if self.GasPid_iState is None:
        self.GasPid_iState = 0.
      if self.GasPid_tPrevious is None:
        self.GasPid_tPrevious = 0.
      if self.GasPid_tCurrent is None:
        self.GasPid_tCurrent = 0.
      if self.GasPid_pTerm is None:
        self.GasPid_pTerm = 0.
      if self.GasPid_iTerm is None:
        self.GasPid_iTerm = 0.
      if self.GasPid_dTerm is None:
        self.GasPid_dTerm = 0.
      if self.GasPid_result is None:
        self.GasPid_result = 0.
      if self.GasPid_referenceValue is None:
        self.GasPid_referenceValue = 0.
      if self.GasPid_currentValue is None:
        self.GasPid_currentValue = 0.
      if self.BrakePid_dState is None:
        self.BrakePid_dState = 0.
      if self.BrakePid_iState is None:
        self.BrakePid_iState = 0.
      if self.BrakePid_tPrevious is None:
        self.BrakePid_tPrevious = 0.
      if self.BrakePid_tCurrent is None:
        self.BrakePid_tCurrent = 0.
      if self.BrakePid_pTerm is None:
        self.BrakePid_pTerm = 0.
      if self.BrakePid_iTerm is None:
        self.BrakePid_iTerm = 0.
      if self.BrakePid_dTerm is None:
        self.BrakePid_dTerm = 0.
      if self.BrakePid_result is None:
        self.BrakePid_result = 0.
      if self.BrakePid_referenceValue is None:
        self.BrakePid_referenceValue = 0.
      if self.BrakePid_currentValue is None:
        self.BrakePid_currentValue = 0.
      if self.GasAdaptation_ffSteering is None:
        self.GasAdaptation_ffSteering = 0.
      if self.activeController is None:
        self.activeController = False
      if self.finalGas is None:
        self.finalGas = 0
      if self.finalBrake is None:
        self.finalBrake = 0
    else:
      self.header = std_msgs.msg.Header()
      self.GasPid_dState = 0.
      self.GasPid_iState = 0.
      self.GasPid_tPrevious = 0.
      self.GasPid_tCurrent = 0.
      self.GasPid_pTerm = 0.
      self.GasPid_iTerm = 0.
      self.GasPid_dTerm = 0.
      self.GasPid_result = 0.
      self.GasPid_referenceValue = 0.
      self.GasPid_currentValue = 0.
      self.BrakePid_dState = 0.
      self.BrakePid_iState = 0.
      self.BrakePid_tPrevious = 0.
      self.BrakePid_tCurrent = 0.
      self.BrakePid_pTerm = 0.
      self.BrakePid_iTerm = 0.
      self.BrakePid_dTerm = 0.
      self.BrakePid_result = 0.
      self.BrakePid_referenceValue = 0.
      self.BrakePid_currentValue = 0.
      self.GasAdaptation_ffSteering = 0.
      self.activeController = False
      self.finalGas = 0
      self.finalBrake = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_21dB2i.pack(_x.GasPid_dState, _x.GasPid_iState, _x.GasPid_tPrevious, _x.GasPid_tCurrent, _x.GasPid_pTerm, _x.GasPid_iTerm, _x.GasPid_dTerm, _x.GasPid_result, _x.GasPid_referenceValue, _x.GasPid_currentValue, _x.BrakePid_dState, _x.BrakePid_iState, _x.BrakePid_tPrevious, _x.BrakePid_tCurrent, _x.BrakePid_pTerm, _x.BrakePid_iTerm, _x.BrakePid_dTerm, _x.BrakePid_result, _x.BrakePid_referenceValue, _x.BrakePid_currentValue, _x.GasAdaptation_ffSteering, _x.activeController, _x.finalGas, _x.finalBrake))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 177
      (_x.GasPid_dState, _x.GasPid_iState, _x.GasPid_tPrevious, _x.GasPid_tCurrent, _x.GasPid_pTerm, _x.GasPid_iTerm, _x.GasPid_dTerm, _x.GasPid_result, _x.GasPid_referenceValue, _x.GasPid_currentValue, _x.BrakePid_dState, _x.BrakePid_iState, _x.BrakePid_tPrevious, _x.BrakePid_tCurrent, _x.BrakePid_pTerm, _x.BrakePid_iTerm, _x.BrakePid_dTerm, _x.BrakePid_result, _x.BrakePid_referenceValue, _x.BrakePid_currentValue, _x.GasAdaptation_ffSteering, _x.activeController, _x.finalGas, _x.finalBrake,) = _struct_21dB2i.unpack(str[start:end])
      self.activeController = bool(self.activeController)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_21dB2i.pack(_x.GasPid_dState, _x.GasPid_iState, _x.GasPid_tPrevious, _x.GasPid_tCurrent, _x.GasPid_pTerm, _x.GasPid_iTerm, _x.GasPid_dTerm, _x.GasPid_result, _x.GasPid_referenceValue, _x.GasPid_currentValue, _x.BrakePid_dState, _x.BrakePid_iState, _x.BrakePid_tPrevious, _x.BrakePid_tCurrent, _x.BrakePid_pTerm, _x.BrakePid_iTerm, _x.BrakePid_dTerm, _x.BrakePid_result, _x.BrakePid_referenceValue, _x.BrakePid_currentValue, _x.GasAdaptation_ffSteering, _x.activeController, _x.finalGas, _x.finalBrake))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 177
      (_x.GasPid_dState, _x.GasPid_iState, _x.GasPid_tPrevious, _x.GasPid_tCurrent, _x.GasPid_pTerm, _x.GasPid_iTerm, _x.GasPid_dTerm, _x.GasPid_result, _x.GasPid_referenceValue, _x.GasPid_currentValue, _x.BrakePid_dState, _x.BrakePid_iState, _x.BrakePid_tPrevious, _x.BrakePid_tCurrent, _x.BrakePid_pTerm, _x.BrakePid_iTerm, _x.BrakePid_dTerm, _x.BrakePid_result, _x.BrakePid_referenceValue, _x.BrakePid_currentValue, _x.GasAdaptation_ffSteering, _x.activeController, _x.finalGas, _x.finalBrake,) = _struct_21dB2i.unpack(str[start:end])
      self.activeController = bool(self.activeController)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_21dB2i = struct.Struct("<21dB2i")

"""autogenerated by genpy from ezls_msgs/MbslnLocalizationOutputData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class MbslnLocalizationOutputData(genpy.Message):
  _md5sum = "a01c6988bea2ab2270264fe533e0636d"
  _type = "ezls_msgs/MbslnLocalizationOutputData"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

geometry_msgs/PoseStamped mean
geometry_msgs/Point variance

int32 state

float64 confidence

float64 dwp

geometry_msgs/Point[] clusterCenters



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['header','mean','variance','state','confidence','dwp','clusterCenters']
  _slot_types = ['std_msgs/Header','geometry_msgs/PoseStamped','geometry_msgs/Point','int32','float64','float64','geometry_msgs/Point[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,mean,variance,state,confidence,dwp,clusterCenters

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MbslnLocalizationOutputData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.mean is None:
        self.mean = geometry_msgs.msg.PoseStamped()
      if self.variance is None:
        self.variance = geometry_msgs.msg.Point()
      if self.state is None:
        self.state = 0
      if self.confidence is None:
        self.confidence = 0.
      if self.dwp is None:
        self.dwp = 0.
      if self.clusterCenters is None:
        self.clusterCenters = []
    else:
      self.header = std_msgs.msg.Header()
      self.mean = geometry_msgs.msg.PoseStamped()
      self.variance = geometry_msgs.msg.Point()
      self.state = 0
      self.confidence = 0.
      self.dwp = 0.
      self.clusterCenters = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.mean.header.seq, _x.mean.header.stamp.secs, _x.mean.header.stamp.nsecs))
      _x = self.mean.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_10di2d.pack(_x.mean.pose.position.x, _x.mean.pose.position.y, _x.mean.pose.position.z, _x.mean.pose.orientation.x, _x.mean.pose.orientation.y, _x.mean.pose.orientation.z, _x.mean.pose.orientation.w, _x.variance.x, _x.variance.y, _x.variance.z, _x.state, _x.confidence, _x.dwp))
      length = len(self.clusterCenters)
      buff.write(_struct_I.pack(length))
      for val1 in self.clusterCenters:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.mean is None:
        self.mean = geometry_msgs.msg.PoseStamped()
      if self.variance is None:
        self.variance = geometry_msgs.msg.Point()
      if self.clusterCenters is None:
        self.clusterCenters = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.mean.header.seq, _x.mean.header.stamp.secs, _x.mean.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mean.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.mean.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 100
      (_x.mean.pose.position.x, _x.mean.pose.position.y, _x.mean.pose.position.z, _x.mean.pose.orientation.x, _x.mean.pose.orientation.y, _x.mean.pose.orientation.z, _x.mean.pose.orientation.w, _x.variance.x, _x.variance.y, _x.variance.z, _x.state, _x.confidence, _x.dwp,) = _struct_10di2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.clusterCenters = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.clusterCenters.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.mean.header.seq, _x.mean.header.stamp.secs, _x.mean.header.stamp.nsecs))
      _x = self.mean.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_10di2d.pack(_x.mean.pose.position.x, _x.mean.pose.position.y, _x.mean.pose.position.z, _x.mean.pose.orientation.x, _x.mean.pose.orientation.y, _x.mean.pose.orientation.z, _x.mean.pose.orientation.w, _x.variance.x, _x.variance.y, _x.variance.z, _x.state, _x.confidence, _x.dwp))
      length = len(self.clusterCenters)
      buff.write(_struct_I.pack(length))
      for val1 in self.clusterCenters:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.mean is None:
        self.mean = geometry_msgs.msg.PoseStamped()
      if self.variance is None:
        self.variance = geometry_msgs.msg.Point()
      if self.clusterCenters is None:
        self.clusterCenters = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.mean.header.seq, _x.mean.header.stamp.secs, _x.mean.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mean.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.mean.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 100
      (_x.mean.pose.position.x, _x.mean.pose.position.y, _x.mean.pose.position.z, _x.mean.pose.orientation.x, _x.mean.pose.orientation.y, _x.mean.pose.orientation.z, _x.mean.pose.orientation.w, _x.variance.x, _x.variance.y, _x.variance.z, _x.state, _x.confidence, _x.dwp,) = _struct_10di2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.clusterCenters = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.clusterCenters.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_10di2d = struct.Struct("<10di2d")
_struct_3d = struct.Struct("<3d")
